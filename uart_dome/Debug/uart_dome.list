
uart_dome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08003160  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003160  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9e5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb2  00000000  00000000  0002aa1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002d1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013b0c  00000000  00000000  0002dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008966  00000000  00000000  000417c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dd96  00000000  00000000  0004a12a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000b7f3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb4 	.word	0x08002fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002fb4 	.word	0x08002fb4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa9c 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8da 	bl	8000310 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f862 	bl	8000224 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ac 	bl	80002bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start_IT(&htim2);  //Start timer interrupt启动定时器中�
 8000164:	4808      	ldr	r0, [pc, #32]	; (8000188 <main+0x3c>)
 8000166:	f001 fa48 	bl	80015fa <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)&buffer,1);  //Start uart interrupt
 800016a:	2201      	movs	r2, #1
 800016c:	4907      	ldr	r1, [pc, #28]	; (800018c <main+0x40>)
 800016e:	4808      	ldr	r0, [pc, #32]	; (8000190 <main+0x44>)
 8000170:	f001 fe7e 	bl	8001e70 <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart1,(uint8_t*)"uart_test_ok",16,10);
 8000174:	230a      	movs	r3, #10
 8000176:	2210      	movs	r2, #16
 8000178:	4906      	ldr	r1, [pc, #24]	; (8000194 <main+0x48>)
 800017a:	4805      	ldr	r0, [pc, #20]	; (8000190 <main+0x44>)
 800017c:	f001 fddf 	bl	8001d3e <HAL_UART_Transmit>

//	  sprintf((uint8_t*)buffer, (uint8_t*)"An approximation ofPi is %f",(uint8_t)a);
//	  HAL_UART_Transmit(&huart1,buffer,sizeof(buffer),10);
//      HAL_Delay(100);

	 Key_Processing();
 8000180:	f002 fcca 	bl	8002b18 <Key_Processing>
 8000184:	e7fc      	b.n	8000180 <main+0x34>
 8000186:	bf00      	nop
 8000188:	20000070 	.word	0x20000070
 800018c:	2000006c 	.word	0x2000006c
 8000190:	2000002c 	.word	0x2000002c
 8000194:	08002fcc 	.word	0x08002fcc

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	; 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 fefc 	bl	8002fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ba:	2301      	movs	r3, #1
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c4:	2300      	movs	r3, #0
 80001c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001cc:	2302      	movs	r3, #2
 80001ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fdc3 	bl	8000d6c <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ec:	f000 f905 	bl	80003fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2102      	movs	r1, #2
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f82e 	bl	800126c <HAL_RCC_ClockConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000216:	f000 f8f0 	bl	80003fa <Error_Handler>
  }
}
 800021a:	bf00      	nop
 800021c:	3740      	adds	r7, #64	; 0x40
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
	...

08000224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000240:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <MX_TIM2_Init+0x94>)
 8000242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_TIM2_Init+0x94>)
 800024a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800024e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MX_TIM2_Init+0x94>)
 8000252:	2200      	movs	r2, #0
 8000254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_TIM2_Init+0x94>)
 8000258:	2205      	movs	r2, #5
 800025a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <MX_TIM2_Init+0x94>)
 800025e:	2200      	movs	r2, #0
 8000260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_TIM2_Init+0x94>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000268:	4813      	ldr	r0, [pc, #76]	; (80002b8 <MX_TIM2_Init+0x94>)
 800026a:	f001 f99b 	bl	80015a4 <HAL_TIM_Base_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000274:	f000 f8c1 	bl	80003fa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800027c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <MX_TIM2_Init+0x94>)
 8000286:	f001 fae3 	bl	8001850 <HAL_TIM_ConfigClockSource>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000290:	f000 f8b3 	bl	80003fa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000294:	2300      	movs	r3, #0
 8000296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800029c:	463b      	mov	r3, r7
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_TIM2_Init+0x94>)
 80002a2:	f001 fca9 	bl	8001bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002ac:	f000 f8a5 	bl	80003fa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000070 	.word	0x20000070

080002bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_USART1_UART_Init+0x50>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART1_UART_Init+0x4c>)
 80002f4:	f001 fcd6 	bl	8001ca4 <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002fe:	f000 f87c 	bl	80003fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000002c 	.word	0x2000002c
 800030c:	40013800 	.word	0x40013800

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b29      	ldr	r3, [pc, #164]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a28      	ldr	r2, [pc, #160]	; (80003cc <MX_GPIO_Init+0xbc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b26      	ldr	r3, [pc, #152]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <MX_GPIO_Init+0xbc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a22      	ldr	r2, [pc, #136]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_GPIO_Init+0xbc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <MX_GPIO_Init+0xbc>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_GPIO_Init+0xbc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a16      	ldr	r2, [pc, #88]	; (80003cc <MX_GPIO_Init+0xbc>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_GPIO_Init+0xbc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	210f      	movs	r1, #15
 8000388:	4811      	ldr	r0, [pc, #68]	; (80003d0 <MX_GPIO_Init+0xc0>)
 800038a:	f000 fcd6 	bl	8000d3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_0_Pin KEY_1_Pin KEY_2_Pin KEY_3_Pin */
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin|KEY_2_Pin|KEY_3_Pin;
 800038e:	230f      	movs	r3, #15
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <MX_GPIO_Init+0xc4>)
 80003a2:	f000 fb59 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80003a6:	230f      	movs	r3, #15
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0xc0>)
 80003be:	f000 fb4b 	bl	8000a58 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010c00 	.word	0x40010c00
 80003d4:	40010800 	.word	0x40010800

080003d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
//static uint8_t temp;
	if(htim->Instance==TIM2){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003e8:	d103      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		Uart_Time_Even();
 80003ea:	f002 fca3 	bl	8002d34 <Uart_Time_Even>
		Key_Timer_Interrupt();
 80003ee:	f002 fb8b 	bl	8002b08 <Key_Timer_Interrupt>
	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
	...

08000408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a14      	ldr	r2, [pc, #80]	; (8000464 <HAL_MspInit+0x5c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b12      	ldr	r3, [pc, #72]	; (8000464 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <HAL_MspInit+0x5c>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000430:	61d3      	str	r3, [r2, #28]
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_MspInit+0x60>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <HAL_MspInit+0x60>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000
 8000468:	40010000 	.word	0x40010000

0800046c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800047c:	d113      	bne.n	80004a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_TIM_Base_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <HAL_TIM_Base_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_TIM_Base_MspInit+0x44>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	201c      	movs	r0, #28
 800049c:	f000 fa2f 	bl	80008fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80004a0:	201c      	movs	r0, #28
 80004a2:	f000 fa48 	bl	8000936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a20      	ldr	r2, [pc, #128]	; (8000550 <HAL_UART_MspInit+0x9c>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d139      	bne.n	8000548 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b19      	ldr	r3, [pc, #100]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_UART_MspInit+0xa0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	60bb      	str	r3, [r7, #8]
 8000502:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <HAL_UART_MspInit+0xa4>)
 800051a:	f000 fa9d 	bl	8000a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800051e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_UART_MspInit+0xa4>)
 8000534:	f000 fa90 	bl	8000a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	2025      	movs	r0, #37	; 0x25
 800053e:	f000 f9de 	bl	80008fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000542:	2025      	movs	r0, #37	; 0x25
 8000544:	f000 f9f7 	bl	8000936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013800 	.word	0x40013800
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <HardFault_Handler+0x4>

0800056e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <MemManage_Handler+0x4>

08000574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <BusFault_Handler+0x4>

0800057a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <UsageFault_Handler+0x4>

08000580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a8:	f000 f8b6 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <TIM2_IRQHandler+0x10>)
 80005b6:	f001 f843 	bl	8001640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000070 	.word	0x20000070

080005c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <USART1_IRQHandler+0x10>)
 80005ca:	f001 fca5 	bl	8001f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000002c 	.word	0x2000002c

080005d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <SystemInit+0x5c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <SystemInit+0x5c>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <SystemInit+0x5c>)
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	4911      	ldr	r1, [pc, #68]	; (8000634 <SystemInit+0x5c>)
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <SystemInit+0x60>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <SystemInit+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <SystemInit+0x5c>)
 80005fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <SystemInit+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <SystemInit+0x5c>)
 800060a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <SystemInit+0x5c>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <SystemInit+0x5c>)
 8000616:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800061a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SystemInit+0x5c>)
 800061e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000622:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <SystemInit+0x64>)
 8000626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800062a:	609a      	str	r2, [r3, #8]
#endif 
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	f8ff0000 	.word	0xf8ff0000
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000640:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000642:	e003      	b.n	800064c <LoopCopyDataInit>

08000644 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000646:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000648:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800064a:	3104      	adds	r1, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000650:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000652:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000654:	d3f6      	bcc.n	8000644 <CopyDataInit>
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000658:	e002      	b.n	8000660 <LoopFillZerobss>

0800065a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800065c:	f842 3b04 	str.w	r3, [r2], #4

08000660 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000662:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000664:	d3f9      	bcc.n	800065a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000666:	f7ff ffb7 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066a:	f002 fc77 	bl	8002f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fd6d 	bl	800014c <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r3, =_sidata
 8000674:	08003154 	.word	0x08003154
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800067c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000684:	20000120 	.word	0x20000120

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f923 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff feae 	bl	8000408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f93b 	bl	8000952 <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 f903 	bl	80008fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	; (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	; (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000008 	.word	0x20000008
 8000738:	200000b0 	.word	0x200000b0

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	; (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	200000b0 	.word	0x200000b0

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	60d3      	str	r3, [r2, #12]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4906      	ldr	r1, [pc, #24]	; (80007e8 <__NVIC_EnableIRQ+0x34>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100

080007ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db0a      	blt.n	8000816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	490c      	ldr	r1, [pc, #48]	; (8000838 <__NVIC_SetPriority+0x4c>)
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	0112      	lsls	r2, r2, #4
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	440b      	add	r3, r1
 8000810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000814:	e00a      	b.n	800082c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4908      	ldr	r1, [pc, #32]	; (800083c <__NVIC_SetPriority+0x50>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	3b04      	subs	r3, #4
 8000824:	0112      	lsls	r2, r2, #4
 8000826:	b2d2      	uxtb	r2, r2
 8000828:	440b      	add	r3, r1
 800082a:	761a      	strb	r2, [r3, #24]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	f04f 32ff 	mov.w	r2, #4294967295
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43da      	mvns	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa01 f303 	lsl.w	r3, r1, r3
 8000892:	43d9      	mvns	r1, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	4313      	orrs	r3, r2
         );
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	; 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff90 	bl	80007ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff2d 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff42 	bl	8000798 <__NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff90 	bl	8000840 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <__NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff35 	bl	80007b4 <__NVIC_EnableIRQ>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffa2 	bl	80008a4 <SysTick_Config>
 8000960:	4603      	mov	r3, r0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800097e:	2b02      	cmp	r3, #2
 8000980:	d005      	beq.n	800098e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2204      	movs	r2, #4
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e051      	b.n	8000a32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 020e 	bic.w	r2, r2, #14
 800099c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0201 	bic.w	r2, r2, #1
 80009ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <HAL_DMA_Abort_IT+0xd0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d029      	beq.n	8000a0c <HAL_DMA_Abort_IT+0xa0>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <HAL_DMA_Abort_IT+0xd4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d022      	beq.n	8000a08 <HAL_DMA_Abort_IT+0x9c>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <HAL_DMA_Abort_IT+0xd8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d01a      	beq.n	8000a02 <HAL_DMA_Abort_IT+0x96>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1d      	ldr	r2, [pc, #116]	; (8000a48 <HAL_DMA_Abort_IT+0xdc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d012      	beq.n	80009fc <HAL_DMA_Abort_IT+0x90>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <HAL_DMA_Abort_IT+0xe0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00a      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x8a>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <HAL_DMA_Abort_IT+0xe4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d102      	bne.n	80009f0 <HAL_DMA_Abort_IT+0x84>
 80009ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009ee:	e00e      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 80009f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f4:	e00b      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 80009f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fa:	e008      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	e005      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	e002      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 8000a08:	2310      	movs	r3, #16
 8000a0a:	e000      	b.n	8000a0e <HAL_DMA_Abort_IT+0xa2>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_DMA_Abort_IT+0xe8>)
 8000a10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	4798      	blx	r3
    } 
  }
  return status;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020008 	.word	0x40020008
 8000a40:	4002001c 	.word	0x4002001c
 8000a44:	40020030 	.word	0x40020030
 8000a48:	40020044 	.word	0x40020044
 8000a4c:	40020058 	.word	0x40020058
 8000a50:	4002006c 	.word	0x4002006c
 8000a54:	40020000 	.word	0x40020000

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b08b      	sub	sp, #44	; 0x2c
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6a:	e127      	b.n	8000cbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	f040 8116 	bne.w	8000cb6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b12      	cmp	r3, #18
 8000a90:	d034      	beq.n	8000afc <HAL_GPIO_Init+0xa4>
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d80d      	bhi.n	8000ab2 <HAL_GPIO_Init+0x5a>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d02b      	beq.n	8000af2 <HAL_GPIO_Init+0x9a>
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d804      	bhi.n	8000aa8 <HAL_GPIO_Init+0x50>
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d031      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d01c      	beq.n	8000ae0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa6:	e048      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d043      	beq.n	8000b34 <HAL_GPIO_Init+0xdc>
 8000aac:	2b11      	cmp	r3, #17
 8000aae:	d01b      	beq.n	8000ae8 <HAL_GPIO_Init+0x90>
          break;
 8000ab0:	e043      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab2:	4a89      	ldr	r2, [pc, #548]	; (8000cd8 <HAL_GPIO_Init+0x280>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d026      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
 8000ab8:	4a87      	ldr	r2, [pc, #540]	; (8000cd8 <HAL_GPIO_Init+0x280>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d806      	bhi.n	8000acc <HAL_GPIO_Init+0x74>
 8000abe:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <HAL_GPIO_Init+0x284>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d020      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
 8000ac4:	4a86      	ldr	r2, [pc, #536]	; (8000ce0 <HAL_GPIO_Init+0x288>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d01d      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
          break;
 8000aca:	e036      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000acc:	4a85      	ldr	r2, [pc, #532]	; (8000ce4 <HAL_GPIO_Init+0x28c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d019      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
 8000ad2:	4a85      	ldr	r2, [pc, #532]	; (8000ce8 <HAL_GPIO_Init+0x290>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d016      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
 8000ad8:	4a84      	ldr	r2, [pc, #528]	; (8000cec <HAL_GPIO_Init+0x294>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0xae>
          break;
 8000ade:	e02c      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e028      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	3304      	adds	r3, #4
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e023      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	3308      	adds	r3, #8
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e01e      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	330c      	adds	r3, #12
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e019      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e012      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d105      	bne.n	8000b28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	611a      	str	r2, [r3, #16]
          break;
 8000b26:	e008      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	615a      	str	r2, [r3, #20]
          break;
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d801      	bhi.n	8000b44 <HAL_GPIO_Init+0xec>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	e001      	b.n	8000b48 <HAL_GPIO_Init+0xf0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3304      	adds	r3, #4
 8000b48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	2bff      	cmp	r3, #255	; 0xff
 8000b4e:	d802      	bhi.n	8000b56 <HAL_GPIO_Init+0xfe>
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_Init+0x104>
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	210f      	movs	r1, #15
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	6a39      	ldr	r1, [r7, #32]
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	431a      	orrs	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 8096 	beq.w	8000cb6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8a:	4b59      	ldr	r3, [pc, #356]	; (8000cf0 <HAL_GPIO_Init+0x298>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a58      	ldr	r2, [pc, #352]	; (8000cf0 <HAL_GPIO_Init+0x298>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b56      	ldr	r3, [pc, #344]	; (8000cf0 <HAL_GPIO_Init+0x298>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba2:	4a54      	ldr	r2, [pc, #336]	; (8000cf4 <HAL_GPIO_Init+0x29c>)
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3302      	adds	r3, #2
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <HAL_GPIO_Init+0x2a0>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d013      	beq.n	8000bf6 <HAL_GPIO_Init+0x19e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4a      	ldr	r2, [pc, #296]	; (8000cfc <HAL_GPIO_Init+0x2a4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00d      	beq.n	8000bf2 <HAL_GPIO_Init+0x19a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <HAL_GPIO_Init+0x2a8>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d007      	beq.n	8000bee <HAL_GPIO_Init+0x196>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <HAL_GPIO_Init+0x2ac>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_GPIO_Init+0x192>
 8000be6:	2303      	movs	r3, #3
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x1a0>
 8000bea:	2304      	movs	r3, #4
 8000bec:	e004      	b.n	8000bf8 <HAL_GPIO_Init+0x1a0>
 8000bee:	2302      	movs	r3, #2
 8000bf0:	e002      	b.n	8000bf8 <HAL_GPIO_Init+0x1a0>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <HAL_GPIO_Init+0x1a0>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfa:	f002 0203 	and.w	r2, r2, #3
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	4093      	lsls	r3, r2
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c08:	493a      	ldr	r1, [pc, #232]	; (8000cf4 <HAL_GPIO_Init+0x29c>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	089b      	lsrs	r3, r3, #2
 8000c0e:	3302      	adds	r3, #2
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d006      	beq.n	8000c30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4938      	ldr	r1, [pc, #224]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4933      	ldr	r1, [pc, #204]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	492e      	ldr	r1, [pc, #184]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	604b      	str	r3, [r1, #4]
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c58:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	4929      	ldr	r1, [pc, #164]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c62:	4013      	ands	r3, r2
 8000c64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d006      	beq.n	8000c80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	4924      	ldr	r1, [pc, #144]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	608b      	str	r3, [r1, #8]
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	491f      	ldr	r1, [pc, #124]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	491a      	ldr	r1, [pc, #104]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60cb      	str	r3, [r1, #12]
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	4915      	ldr	r1, [pc, #84]	; (8000d08 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	3301      	adds	r3, #1
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f47f aed0 	bne.w	8000a6c <HAL_GPIO_Init+0x14>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	372c      	adds	r7, #44	; 0x2c
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	10210000 	.word	0x10210000
 8000cdc:	10110000 	.word	0x10110000
 8000ce0:	10120000 	.word	0x10120000
 8000ce4:	10310000 	.word	0x10310000
 8000ce8:	10320000 	.word	0x10320000
 8000cec:	10220000 	.word	0x10220000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011000 	.word	0x40011000
 8000d04:	40011400 	.word	0x40011400
 8000d08:	40010400 	.word	0x40010400

08000d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	460b      	mov	r3, r1
 8000d44:	807b      	strh	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d4a:	787b      	ldrb	r3, [r7, #1]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d50:	887a      	ldrh	r2, [r7, #2]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d56:	e003      	b.n	8000d60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d58:	887b      	ldrh	r3, [r7, #2]
 8000d5a:	041a      	lsls	r2, r3, #16
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	611a      	str	r2, [r3, #16]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e26c      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8087 	beq.w	8000e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d8c:	4b92      	ldr	r3, [pc, #584]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d98:	4b8f      	ldr	r3, [pc, #572]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d112      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d10b      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	4b89      	ldr	r3, [pc, #548]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d06c      	beq.n	8000e98 <HAL_RCC_OscConfig+0x12c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d168      	bne.n	8000e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e246      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd2:	d106      	bne.n	8000de2 <HAL_RCC_OscConfig+0x76>
 8000dd4:	4b80      	ldr	r3, [pc, #512]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a7f      	ldr	r2, [pc, #508]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e02e      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x98>
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e01d      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0xbc>
 8000e0e:	4b72      	ldr	r3, [pc, #456]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a6e      	ldr	r2, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a6a      	ldr	r2, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b68      	ldr	r3, [pc, #416]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a67      	ldr	r2, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fc78 	bl	800073c <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fc74 	bl	800073c <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1fa      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0xe4>
 8000e6e:	e014      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc64 	bl	800073c <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fc60 	bl	800073c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e1e6      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x10c>
 8000e96:	e000      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d063      	beq.n	8000f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d11c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e1ba      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4939      	ldr	r1, [pc, #228]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	e03a      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d020      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fc19 	bl	800073c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fc15 	bl	800073c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e19b      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4927      	ldr	r1, [pc, #156]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fbf8 	bl	800073c <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fbf4 	bl	800073c <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e17a      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d03a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d019      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fbd8 	bl	800073c <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fbd4 	bl	800073c <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e15a      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 fada 	bl	8001568 <RCC_Delay>
 8000fb4:	e01c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fbbe 	bl	800073c <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc2:	e00f      	b.n	8000fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fbba 	bl	800073c <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d908      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e140      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	42420000 	.word	0x42420000
 8000fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	4b9e      	ldr	r3, [pc, #632]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e9      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a6 	beq.w	800114a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4b97      	ldr	r3, [pc, #604]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b94      	ldr	r3, [pc, #592]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a93      	ldr	r2, [pc, #588]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b91      	ldr	r3, [pc, #580]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a8a      	ldr	r2, [pc, #552]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001042:	f7ff fb7b 	bl	800073c <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104a:	f7ff fb77 	bl	800073c <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e0fd      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x4f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x312>
 8001070:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a7a      	ldr	r2, [pc, #488]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	e02d      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x334>
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a75      	ldr	r2, [pc, #468]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a72      	ldr	r2, [pc, #456]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
 800109e:	e01c      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x356>
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a6c      	ldr	r2, [pc, #432]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6213      	str	r3, [r2, #32]
 80010b4:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a69      	ldr	r2, [pc, #420]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6213      	str	r3, [r2, #32]
 80010c0:	e00b      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a66      	ldr	r2, [pc, #408]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	4b64      	ldr	r3, [pc, #400]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a63      	ldr	r2, [pc, #396]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fb2b 	bl	800073c <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	e00a      	b.n	8001100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff fb27 	bl	800073c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e0ab      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ee      	beq.n	80010ea <HAL_RCC_OscConfig+0x37e>
 800110c:	e014      	b.n	8001138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb15 	bl	800073c <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fb11 	bl	800073c <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e095      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800112c:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ee      	bne.n	8001116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d105      	bne.n	800114a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8081 	beq.w	8001256 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001154:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d061      	beq.n	8001224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d146      	bne.n	80011f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fae5 	bl	800073c <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff fae1 	bl	800073c <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e067      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001188:	4b35      	ldr	r3, [pc, #212]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d108      	bne.n	80011b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119e:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	492d      	ldr	r1, [pc, #180]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a19      	ldr	r1, [r3, #32]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	430b      	orrs	r3, r1
 80011c2:	4927      	ldr	r1, [pc, #156]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fab5 	bl	800073c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fab1 	bl	800073c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e037      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x46a>
 80011f4:	e02f      	b.n	8001256 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <HAL_RCC_OscConfig+0x4fc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fa9e 	bl	800073c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fa9a 	bl	800073c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e020      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x498>
 8001222:	e018      	b.n	8001256 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e013      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x4f4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	429a      	cmp	r2, r3
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	40007000 	.word	0x40007000
 8001268:	42420060 	.word	0x42420060

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0d0      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d910      	bls.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 0207 	bic.w	r2, r3, #7
 8001296:	4965      	ldr	r1, [pc, #404]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0b8      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c8:	4b59      	ldr	r3, [pc, #356]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a58      	ldr	r2, [pc, #352]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e0:	4b53      	ldr	r3, [pc, #332]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ec:	4b50      	ldr	r3, [pc, #320]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	494d      	ldr	r1, [pc, #308]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d040      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d115      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e07f      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e073      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e06b      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4936      	ldr	r1, [pc, #216]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff f9ee 	bl	800073c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff f9ea 	bl	800073c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e053      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d210      	bcs.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4922      	ldr	r1, [pc, #136]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e032      	b.n	8001422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	4916      	ldr	r1, [pc, #88]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fa:	f000 f821 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 80013fe:	4601      	mov	r1, r0
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	fa21 f303 	lsr.w	r3, r1, r3
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_RCC_ClockConfig+0x1cc>)
 8001414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1d0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f94c 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000
 8001430:	40021000 	.word	0x40021000
 8001434:	08003134 	.word	0x08003134
 8001438:	20000000 	.word	0x20000000
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001440:	b490      	push	{r4, r7}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001448:	1d3c      	adds	r4, r7, #4
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b04      	cmp	r3, #4
 8001478:	d002      	beq.n	8001480 <HAL_RCC_GetSysClockFreq+0x40>
 800147a:	2b08      	cmp	r3, #8
 800147c:	d003      	beq.n	8001486 <HAL_RCC_GetSysClockFreq+0x46>
 800147e:	e02d      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001482:	623b      	str	r3, [r7, #32]
      break;
 8001484:	e02d      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	0c9b      	lsrs	r3, r3, #18
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001492:	4413      	add	r3, r2
 8001494:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001498:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	0c5b      	lsrs	r3, r3, #17
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014b2:	4413      	add	r3, r2
 80014b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80014be:	fb02 f203 	mul.w	r2, r2, r3
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	623b      	str	r3, [r7, #32]
      break;
 80014da:	e002      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80014de:	623b      	str	r3, [r7, #32]
      break;
 80014e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc90      	pop	{r4, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	08002fdc 	.word	0x08002fdc
 80014f4:	08002fec 	.word	0x08002fec
 80014f8:	40021000 	.word	0x40021000
 80014fc:	007a1200 	.word	0x007a1200
 8001500:	003d0900 	.word	0x003d0900

08001504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <HAL_RCC_GetHCLKFreq+0x10>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800151c:	f7ff fff2 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001520:	4601      	mov	r1, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_RCC_GetPCLK1Freq+0x24>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	08003144 	.word	0x08003144

08001540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001544:	f7ff ffde 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001548:	4601      	mov	r1, r0
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0adb      	lsrs	r3, r3, #11
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	fa21 f303 	lsr.w	r3, r1, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	08003144 	.word	0x08003144

08001568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <RCC_Delay+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <RCC_Delay+0x38>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001584:	bf00      	nop
  }
  while (Delay --);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60fa      	str	r2, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <RCC_Delay+0x1c>
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e01d      	b.n	80015f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7fe ff4e 	bl	800046c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f000 fa10 	bl	8001a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b06      	cmp	r3, #6
 8001622:	d007      	beq.n	8001634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b02      	cmp	r3, #2
 8001654:	d122      	bne.n	800169c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	d11b      	bne.n	800169c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0202 	mvn.w	r2, #2
 800166c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f9a4 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8001688:	e005      	b.n	8001696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f997 	bl	80019be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f9a6 	bl	80019e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11b      	bne.n	80016f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0204 	mvn.w	r2, #4
 80016c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f97a 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 80016dc:	e005      	b.n	80016ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f96d 	bl	80019be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f97c 	bl	80019e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d122      	bne.n	8001744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b08      	cmp	r3, #8
 800170a:	d11b      	bne.n	8001744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0208 	mvn.w	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2204      	movs	r2, #4
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f950 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f943 	bl	80019be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f952 	bl	80019e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b10      	cmp	r3, #16
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b10      	cmp	r3, #16
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0210 	mvn.w	r2, #16
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2208      	movs	r2, #8
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f926 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f919 	bl	80019be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f928 	bl	80019e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0201 	mvn.w	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fe0a 	bl	80003d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	2b80      	cmp	r3, #128	; 0x80
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d107      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa51 	bl	8001c92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017fa:	2b40      	cmp	r3, #64	; 0x40
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001808:	2b40      	cmp	r3, #64	; 0x40
 800180a:	d107      	bne.n	800181c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8ec 	bl	80019f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b20      	cmp	r3, #32
 8001828:	d10e      	bne.n	8001848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b20      	cmp	r3, #32
 8001836:	d107      	bne.n	8001848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0220 	mvn.w	r2, #32
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fa1c 	bl	8001c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_TIM_ConfigClockSource+0x18>
 8001864:	2302      	movs	r3, #2
 8001866:	e0a6      	b.n	80019b6 <HAL_TIM_ConfigClockSource+0x166>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800188e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b40      	cmp	r3, #64	; 0x40
 800189e:	d067      	beq.n	8001970 <HAL_TIM_ConfigClockSource+0x120>
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d80b      	bhi.n	80018bc <HAL_TIM_ConfigClockSource+0x6c>
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d073      	beq.n	8001990 <HAL_TIM_ConfigClockSource+0x140>
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d802      	bhi.n	80018b2 <HAL_TIM_ConfigClockSource+0x62>
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d06f      	beq.n	8001990 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80018b0:	e078      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d06c      	beq.n	8001990 <HAL_TIM_ConfigClockSource+0x140>
 80018b6:	2b30      	cmp	r3, #48	; 0x30
 80018b8:	d06a      	beq.n	8001990 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80018ba:	e073      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018bc:	2b70      	cmp	r3, #112	; 0x70
 80018be:	d00d      	beq.n	80018dc <HAL_TIM_ConfigClockSource+0x8c>
 80018c0:	2b70      	cmp	r3, #112	; 0x70
 80018c2:	d804      	bhi.n	80018ce <HAL_TIM_ConfigClockSource+0x7e>
 80018c4:	2b50      	cmp	r3, #80	; 0x50
 80018c6:	d033      	beq.n	8001930 <HAL_TIM_ConfigClockSource+0xe0>
 80018c8:	2b60      	cmp	r3, #96	; 0x60
 80018ca:	d041      	beq.n	8001950 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80018cc:	e06a      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80018ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d2:	d066      	beq.n	80019a2 <HAL_TIM_ConfigClockSource+0x152>
 80018d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d8:	d017      	beq.n	800190a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80018da:	e063      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f000 f965 	bl	8001bba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
      break;
 8001908:	e04c      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6899      	ldr	r1, [r3, #8]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f000 f94e 	bl	8001bba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800192c:	609a      	str	r2, [r3, #8]
      break;
 800192e:	e039      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	461a      	mov	r2, r3
 800193e:	f000 f8c5 	bl	8001acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2150      	movs	r1, #80	; 0x50
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f91c 	bl	8001b86 <TIM_ITRx_SetConfig>
      break;
 800194e:	e029      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	461a      	mov	r2, r3
 800195e:	f000 f8e3 	bl	8001b28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2160      	movs	r1, #96	; 0x60
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f90c 	bl	8001b86 <TIM_ITRx_SetConfig>
      break;
 800196e:	e019      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	461a      	mov	r2, r3
 800197e:	f000 f8a5 	bl	8001acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f8fc 	bl	8001b86 <TIM_ITRx_SetConfig>
      break;
 800198e:	e009      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 f8f3 	bl	8001b86 <TIM_ITRx_SetConfig>
      break;
 80019a0:	e000      	b.n	80019a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80019a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
	...

08001a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <TIM_Base_SetConfig+0xb8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00b      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a26:	d007      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <TIM_Base_SetConfig+0xbc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <TIM_Base_SetConfig+0x30>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <TIM_Base_SetConfig+0xc0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d108      	bne.n	8001a4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <TIM_Base_SetConfig+0xb8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00b      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a58:	d007      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <TIM_Base_SetConfig+0xbc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <TIM_Base_SetConfig+0x62>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <TIM_Base_SetConfig+0xc0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d108      	bne.n	8001a7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <TIM_Base_SetConfig+0xb8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d103      	bne.n	8001ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	615a      	str	r2, [r3, #20]
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40000800 	.word	0x40000800

08001acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f023 0201 	bic.w	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f023 030a 	bic.w	r3, r3, #10
 8001b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	621a      	str	r2, [r3, #32]
}
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f023 0210 	bic.w	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	031b      	lsls	r3, r3, #12
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001b64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	621a      	str	r2, [r3, #32]
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	f043 0307 	orr.w	r3, r3, #7
 8001ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	021a      	lsls	r2, r3, #8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	609a      	str	r2, [r3, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e032      	b.n	8001c76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e03f      	b.n	8001d36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fbf2 	bl	80004b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb8d 	bl	8002408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b088      	sub	sp, #32
 8001d42:	af02      	add	r7, sp, #8
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	f040 8083 	bne.w	8001e66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_UART_Transmit+0x2e>
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e07b      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Transmit+0x40>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e074      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2221      	movs	r2, #33	; 0x21
 8001d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d94:	f7fe fcd2 	bl	800073c <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	88fa      	ldrh	r2, [r7, #6]
 8001d9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001da6:	e042      	b.n	8001e2e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbe:	d122      	bne.n	8001e06 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f9b2 	bl	8002134 <UART_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e046      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3302      	adds	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	e017      	b.n	8001e2e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3301      	adds	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	e013      	b.n	8001e2e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f98f 	bl	8002134 <UART_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e023      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1b7      	bne.n	8001da8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2140      	movs	r1, #64	; 0x40
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f976 	bl	8002134 <UART_WaitOnFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e00a      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
  }
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	d140      	bne.n	8001f0c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_UART_Receive_IT+0x26>
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e039      	b.n	8001f0e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_UART_Receive_IT+0x38>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e032      	b.n	8001f0e <HAL_UART_Receive_IT+0x9e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2222      	movs	r2, #34	; 0x22
 8001ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_UART_IRQHandler+0x52>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f9ce 	bl	8002304 <UART_Receive_IT>
      return;
 8001f68:	e0cc      	b.n	8002104 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80ab 	beq.w	80020c8 <HAL_UART_IRQHandler+0x1b0>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <HAL_UART_IRQHandler+0x70>
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a0 	beq.w	80020c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_UART_IRQHandler+0x90>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xb0>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_UART_IRQHandler+0xd0>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_UART_IRQHandler+0xf0>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	f043 0208 	orr.w	r2, r3, #8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d078      	beq.n	8002102 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_UART_IRQHandler+0x112>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f96d 	bl	8002304 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_UART_IRQHandler+0x13a>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d031      	beq.n	80020b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8b8 	bl	80021c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d023      	beq.n	80020ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002074:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	2b00      	cmp	r3, #0
 800207c:	d013      	beq.n	80020a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_UART_IRQHandler+0x1f4>)
 8002084:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fc6e 	bl	800096c <HAL_DMA_Abort_IT>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020a0:	4610      	mov	r0, r2
 80020a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a4:	e00e      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f83b 	bl	8002122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ac:	e00a      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f837 	bl	8002122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b4:	e006      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f833 	bl	8002122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020c2:	e01e      	b.n	8002102 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c4:	bf00      	nop
    return;
 80020c6:	e01c      	b.n	8002102 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_UART_IRQHandler+0x1cc>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8a4 	bl	800222a <UART_Transmit_IT>
    return;
 80020e2:	e00f      	b.n	8002104 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_UART_IRQHandler+0x1ec>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f8eb 	bl	80022d4 <UART_EndTransmit_IT>
    return;
 80020fe:	bf00      	nop
 8002100:	e000      	b.n	8002104 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002102:	bf00      	nop
  }
}
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	08002203 	.word	0x08002203

08002110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002144:	e02c      	b.n	80021a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d028      	beq.n	80021a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <UART_WaitOnFlagUntilTimeout+0x30>
 8002154:	f7fe faf2 	bl	800073c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	429a      	cmp	r2, r3
 8002162:	d21d      	bcs.n	80021a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002172:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e00f      	b.n	80021c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d0c3      	beq.n	8002146 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7ff ff80 	bl	8002122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b21      	cmp	r3, #33	; 0x21
 800223c:	d144      	bne.n	80022c8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002246:	d11a      	bne.n	800227e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800225c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	1c9a      	adds	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	621a      	str	r2, [r3, #32]
 8002270:	e00e      	b.n	8002290 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	e008      	b.n	8002290 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6211      	str	r1, [r2, #32]
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10f      	bne.n	80022c4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff0b 	bl	8002110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b22      	cmp	r3, #34	; 0x22
 8002316:	d171      	bne.n	80023fc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	d123      	bne.n	800236a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10e      	bne.n	800234e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	1c9a      	adds	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
 800234c:	e029      	b.n	80023a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
 8002368:	e01b      	b.n	80023a2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6858      	ldr	r0, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	1c59      	adds	r1, r3, #1
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6291      	str	r1, [r2, #40]	; 0x28
 8002382:	b2c2      	uxtb	r2, r0
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e00c      	b.n	80023a2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	1c58      	adds	r0, r3, #1
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	6288      	str	r0, [r1, #40]	; 0x28
 800239a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4619      	mov	r1, r3
 80023b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d120      	bne.n	80023f8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0220 	bic.w	r2, r2, #32
 80023c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fd7a 	bl	8002ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e002      	b.n	80023fe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002442:	f023 030c 	bic.w	r3, r3, #12
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <UART_SetConfig+0x1ac>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d14e      	bne.n	800250e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002470:	f7ff f866 	bl	8001540 <HAL_RCC_GetPCLK2Freq>
 8002474:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a4a      	ldr	r2, [pc, #296]	; (80025b8 <UART_SetConfig+0x1b0>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	0119      	lsls	r1, r3, #4
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	009a      	lsls	r2, r3, #2
 80024a0:	441a      	add	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <UART_SetConfig+0x1b0>)
 80024ae:	fba3 0302 	umull	r0, r3, r3, r2
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	fb00 f303 	mul.w	r3, r0, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	3332      	adds	r3, #50	; 0x32
 80024c0:	4a3d      	ldr	r2, [pc, #244]	; (80025b8 <UART_SetConfig+0x1b0>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024cc:	4419      	add	r1, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009a      	lsls	r2, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <UART_SetConfig+0x1b0>)
 80024e6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2064      	movs	r0, #100	; 0x64
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	3332      	adds	r3, #50	; 0x32
 80024f8:	4a2f      	ldr	r2, [pc, #188]	; (80025b8 <UART_SetConfig+0x1b0>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	f003 020f 	and.w	r2, r3, #15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	440a      	add	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800250c:	e04d      	b.n	80025aa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800250e:	f7ff f803 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8002512:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	009a      	lsls	r2, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <UART_SetConfig+0x1b0>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	0119      	lsls	r1, r3, #4
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009a      	lsls	r2, r3, #2
 800253e:	441a      	add	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	fbb2 f2f3 	udiv	r2, r2, r3
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <UART_SetConfig+0x1b0>)
 800254c:	fba3 0302 	umull	r0, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	2064      	movs	r0, #100	; 0x64
 8002554:	fb00 f303 	mul.w	r3, r0, r3
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	3332      	adds	r3, #50	; 0x32
 800255e:	4a16      	ldr	r2, [pc, #88]	; (80025b8 <UART_SetConfig+0x1b0>)
 8002560:	fba2 2303 	umull	r2, r3, r2, r3
 8002564:	095b      	lsrs	r3, r3, #5
 8002566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800256a:	4419      	add	r1, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <UART_SetConfig+0x1b0>)
 8002584:	fba3 0302 	umull	r0, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2064      	movs	r0, #100	; 0x64
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	3332      	adds	r3, #50	; 0x32
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <UART_SetConfig+0x1b0>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	f003 020f 	and.w	r2, r3, #15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	440a      	add	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013800 	.word	0x40013800
 80025b8:	51eb851f 	.word	0x51eb851f

080025bc <Get_Key_Value>:
/********************
 **功能：获取按键状态
 **输入按键的编号
 **返回值：1/0
 ********************/
static uint8_t Get_Key_Value(unsigned char temp) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
	switch (temp) {
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d823      	bhi.n	8002614 <Get_Key_Value+0x58>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <Get_Key_Value+0x18>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025f1 	.word	0x080025f1
 80025dc:	080025fd 	.word	0x080025fd
 80025e0:	08002609 	.word	0x08002609
	case 0:
		return KEY0_READ;
 80025e4:	2101      	movs	r1, #1
 80025e6:	480e      	ldr	r0, [pc, #56]	; (8002620 <Get_Key_Value+0x64>)
 80025e8:	f7fe fb90 	bl	8000d0c <HAL_GPIO_ReadPin>
 80025ec:	4603      	mov	r3, r0
 80025ee:	e012      	b.n	8002616 <Get_Key_Value+0x5a>
		break;

	case 1:
		return KEY1_READ;
 80025f0:	2102      	movs	r1, #2
 80025f2:	480b      	ldr	r0, [pc, #44]	; (8002620 <Get_Key_Value+0x64>)
 80025f4:	f7fe fb8a 	bl	8000d0c <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	e00c      	b.n	8002616 <Get_Key_Value+0x5a>
		break;

	case 2:
		return KEY2_READ;
 80025fc:	2104      	movs	r1, #4
 80025fe:	4808      	ldr	r0, [pc, #32]	; (8002620 <Get_Key_Value+0x64>)
 8002600:	f7fe fb84 	bl	8000d0c <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	e006      	b.n	8002616 <Get_Key_Value+0x5a>
		break;

	case 3:
		return KEY3_READ;
 8002608:	2108      	movs	r1, #8
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <Get_Key_Value+0x64>)
 800260c:	f7fe fb7e 	bl	8000d0c <HAL_GPIO_ReadPin>
 8002610:	4603      	mov	r3, r0
 8002612:	e000      	b.n	8002616 <Get_Key_Value+0x5a>
		break;

	default:
		return 0;
 8002614:	2300      	movs	r3, #0
		break;
	}
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40010800 	.word	0x40010800

08002624 <Get_Key_Time_Value>:

/********************************
 函数功能：获取键按下 和抬起时间的值
 *******************************/
static void Get_Key_Time_Value() {
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
	static uint8_t i;						//加了static进入函数不会给清零，要么整个全局边量
	for (i = 0; i < KEY_NUMBER; i++) {
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <Get_Key_Time_Value+0xf0>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e068      	b.n	8002702 <Get_Key_Time_Value+0xde>
		if (key[i].edge_flag == KEY_PRESS) //如果按键按下（下降沿）开始计时到松开结束
 8002630:	4b38      	ldr	r3, [pc, #224]	; (8002714 <Get_Key_Time_Value+0xf0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <Get_Key_Time_Value+0xf4>)
 8002638:	460b      	mov	r3, r1
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a5b      	subs	r3, r3, r1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4413      	add	r3, r2
 8002642:	3301      	adds	r3, #1
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d116      	bne.n	8002678 <Get_Key_Time_Value+0x54>
			key[i].time_down++;
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <Get_Key_Time_Value+0xf0>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	4931      	ldr	r1, [pc, #196]	; (8002718 <Get_Key_Time_Value+0xf4>)
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	1a9b      	subs	r3, r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	440b      	add	r3, r1
 800265c:	330a      	adds	r3, #10
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	b298      	uxth	r0, r3
 8002664:	492c      	ldr	r1, [pc, #176]	; (8002718 <Get_Key_Time_Value+0xf4>)
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	440b      	add	r3, r1
 8002670:	330a      	adds	r3, #10
 8002672:	4602      	mov	r2, r0
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e03e      	b.n	80026f6 <Get_Key_Time_Value+0xd2>
		else if (key[i].edge_flag == KEY_FREE) {
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <Get_Key_Time_Value+0xf0>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	4a26      	ldr	r2, [pc, #152]	; (8002718 <Get_Key_Time_Value+0xf4>)
 8002680:	460b      	mov	r3, r1
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a5b      	subs	r3, r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	3301      	adds	r3, #1
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d131      	bne.n	80026f6 <Get_Key_Time_Value+0xd2>
			key[i].time_up++;				//定时器间隔（1ms）加1，用来判断按键松开时长到下个下降沿结束
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <Get_Key_Time_Value+0xf0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	491f      	ldr	r1, [pc, #124]	; (8002718 <Get_Key_Time_Value+0xf4>)
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	330c      	adds	r3, #12
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	b298      	uxth	r0, r3
 80026ac:	491a      	ldr	r1, [pc, #104]	; (8002718 <Get_Key_Time_Value+0xf4>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	440b      	add	r3, r1
 80026b8:	330c      	adds	r3, #12
 80026ba:	4602      	mov	r2, r0
 80026bc:	801a      	strh	r2, [r3, #0]
			if (key[i].time_up > 65000)
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <Get_Key_Time_Value+0xf0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <Get_Key_Time_Value+0xf4>)
 80026c6:	460b      	mov	r3, r1
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a5b      	subs	r3, r3, r1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	330c      	adds	r3, #12
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80026d8:	4293      	cmp	r3, r2
 80026da:	d90c      	bls.n	80026f6 <Get_Key_Time_Value+0xd2>
				key[i].time_up = 65000;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <Get_Key_Time_Value+0xf0>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <Get_Key_Time_Value+0xf4>)
 80026e4:	460b      	mov	r3, r1
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a5b      	subs	r3, r3, r1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	330c      	adds	r3, #12
 80026f0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80026f4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <Get_Key_Time_Value+0xf0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <Get_Key_Time_Value+0xf0>)
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <Get_Key_Time_Value+0xf0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d992      	bls.n	8002630 <Get_Key_Time_Value+0xc>
		}

	}
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000028 	.word	0x20000028
 8002718:	200000b4 	.word	0x200000b4

0800271c <Get_Key_Event>:

/************************
 函数功能：获取键按下的事件
 ***********************/
static void Get_Key_Event() {
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	static uint8_t i;
	for (i = 0; i < KEY_NUMBER; i++) {
 8002720:	4b62      	ldr	r3, [pc, #392]	; (80028ac <Get_Key_Event+0x190>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e0b7      	b.n	8002898 <Get_Key_Event+0x17c>
		if (key[i].event == 0) {
 8002728:	4b60      	ldr	r3, [pc, #384]	; (80028ac <Get_Key_Event+0x190>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	4a60      	ldr	r2, [pc, #384]	; (80028b0 <Get_Key_Event+0x194>)
 8002730:	460b      	mov	r3, r1
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a5b      	subs	r3, r3, r1
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 80a5 	bne.w	800288c <Get_Key_Event+0x170>
			//短按
			if (key[i].time_down_pre > 0 && key[i].time_down_pre < SHORT_TIME) {
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <Get_Key_Event+0x190>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4a59      	ldr	r2, [pc, #356]	; (80028b0 <Get_Key_Event+0x194>)
 800274a:	460b      	mov	r3, r1
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a5b      	subs	r3, r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3308      	adds	r3, #8
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <Get_Key_Event+0x72>
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <Get_Key_Event+0x190>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	4a53      	ldr	r2, [pc, #332]	; (80028b0 <Get_Key_Event+0x194>)
 8002764:	460b      	mov	r3, r1
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	1a5b      	subs	r3, r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	3308      	adds	r3, #8
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002776:	d20a      	bcs.n	800278e <Get_Key_Event+0x72>
				key[i].event = 1;
 8002778:	4b4c      	ldr	r3, [pc, #304]	; (80028ac <Get_Key_Event+0x190>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <Get_Key_Event+0x194>)
 8002780:	460b      	mov	r3, r1
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a5b      	subs	r3, r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
			}

			//双击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <Get_Key_Event+0x190>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <Get_Key_Event+0x194>)
 8002796:	460b      	mov	r3, r1
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	3306      	adds	r3, #6
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <Get_Key_Event+0xbc>
 80027a8:	4b40      	ldr	r3, [pc, #256]	; (80028ac <Get_Key_Event+0x190>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <Get_Key_Event+0x194>)
 80027b0:	460b      	mov	r3, r1
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a5b      	subs	r3, r3, r1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	3306      	adds	r3, #6
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	2b77      	cmp	r3, #119	; 0x77
 80027c0:	d80a      	bhi.n	80027d8 <Get_Key_Event+0xbc>
				key[i].event = 4;
 80027c2:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <Get_Key_Event+0x190>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <Get_Key_Event+0x194>)
 80027ca:	460b      	mov	r3, r1
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	1a5b      	subs	r3, r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
			}

			//三击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[0]<SHORT_SHORT_TIME && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <Get_Key_Event+0x190>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <Get_Key_Event+0x194>)
 80027e0:	460b      	mov	r3, r1
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a5b      	subs	r3, r3, r1
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3306      	adds	r3, #6
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d024      	beq.n	800283c <Get_Key_Event+0x120>
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <Get_Key_Event+0x190>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <Get_Key_Event+0x194>)
 80027fa:	460b      	mov	r3, r1
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a5b      	subs	r3, r3, r1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	3304      	adds	r3, #4
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	2b77      	cmp	r3, #119	; 0x77
 800280a:	d817      	bhi.n	800283c <Get_Key_Event+0x120>
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <Get_Key_Event+0x190>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <Get_Key_Event+0x194>)
 8002814:	460b      	mov	r3, r1
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a5b      	subs	r3, r3, r1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	3306      	adds	r3, #6
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	2b77      	cmp	r3, #119	; 0x77
 8002824:	d80a      	bhi.n	800283c <Get_Key_Event+0x120>
				key[i].event = 5;
 8002826:	4b21      	ldr	r3, [pc, #132]	; (80028ac <Get_Key_Event+0x190>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <Get_Key_Event+0x194>)
 800282e:	460b      	mov	r3, r1
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	1a5b      	subs	r3, r3, r1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	2205      	movs	r2, #5
 800283a:	701a      	strb	r2, [r3, #0]
			}

			//长按
			if (key[i].time_down_pre > LONG_TIME && key[i].time_down_pre < LONG_LONG_TIME) {
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <Get_Key_Event+0x190>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <Get_Key_Event+0x194>)
 8002844:	460b      	mov	r3, r1
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a5b      	subs	r3, r3, r1
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	3308      	adds	r3, #8
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002856:	d919      	bls.n	800288c <Get_Key_Event+0x170>
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <Get_Key_Event+0x190>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <Get_Key_Event+0x194>)
 8002860:	460b      	mov	r3, r1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a5b      	subs	r3, r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	3308      	adds	r3, #8
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002872:	4293      	cmp	r3, r2
 8002874:	d80a      	bhi.n	800288c <Get_Key_Event+0x170>
				key[i].event = 2;
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <Get_Key_Event+0x190>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <Get_Key_Event+0x194>)
 800287e:	460b      	mov	r3, r1
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <Get_Key_Event+0x190>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <Get_Key_Event+0x190>)
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <Get_Key_Event+0x190>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	f67f af43 	bls.w	8002728 <Get_Key_Event+0xc>
			}
		}
	}
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000029 	.word	0x20000029
 80028b0:	200000b4 	.word	0x200000b4

080028b4 <Key_EdgeJudge>:

static void Key_EdgeJudge() {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	static uint8_t i;

	for (i = 0; i < KEY_NUMBER; i++) {
 80028b8:	4b91      	ldr	r3, [pc, #580]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e118      	b.n	8002af2 <Key_EdgeJudge+0x23e>


		//持续按判断
		if (key[i].time_down > LONG_LONG_TIME) {
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	4a8f      	ldr	r2, [pc, #572]	; (8002b04 <Key_EdgeJudge+0x250>)
 80028c8:	460b      	mov	r3, r1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a5b      	subs	r3, r3, r1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	330a      	adds	r3, #10
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028da:	4293      	cmp	r3, r2
 80028dc:	d90a      	bls.n	80028f4 <Key_EdgeJudge+0x40>
			key[i].event = 3;
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4a87      	ldr	r2, [pc, #540]	; (8002b04 <Key_EdgeJudge+0x250>)
 80028e6:	460b      	mov	r3, r1
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a5b      	subs	r3, r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	2203      	movs	r2, #3
 80028f2:	701a      	strb	r2, [r3, #0]
		}

		//抬起后120ms再判断事件避免把双击顶掉
		if (key[i].time_up == SHORT_SHORT_TIME) {
 80028f4:	4b82      	ldr	r3, [pc, #520]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4a82      	ldr	r2, [pc, #520]	; (8002b04 <Key_EdgeJudge+0x250>)
 80028fc:	460b      	mov	r3, r1
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a5b      	subs	r3, r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	330c      	adds	r3, #12
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	2b78      	cmp	r3, #120	; 0x78
 800290c:	d125      	bne.n	800295a <Key_EdgeJudge+0xa6>
			Get_Key_Event();
 800290e:	f7ff ff05 	bl	800271c <Get_Key_Event>
			key[i].time_down_pre = 0;
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <Key_EdgeJudge+0x250>)
 800291a:	460b      	mov	r3, r1
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	3308      	adds	r3, #8
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[0]=0;
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <Key_EdgeJudge+0x24c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4a74      	ldr	r2, [pc, #464]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002932:	460b      	mov	r3, r1
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	1a5b      	subs	r3, r3, r1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	3304      	adds	r3, #4
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[1]=0;
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <Key_EdgeJudge+0x250>)
 800294a:	460b      	mov	r3, r1
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a5b      	subs	r3, r3, r1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3306      	adds	r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
		}

		//边沿检测
		key[i].count <<= 1;					//放弃最老的值
 800295a:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <Key_EdgeJudge+0x24c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4a68      	ldr	r2, [pc, #416]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002962:	460b      	mov	r3, r1
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a5b      	subs	r3, r3, r1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	3302      	adds	r3, #2
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4a63      	ldr	r2, [pc, #396]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002972:	7812      	ldrb	r2, [r2, #0]
 8002974:	4611      	mov	r1, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	b2d8      	uxtb	r0, r3
 800297a:	4a62      	ldr	r2, [pc, #392]	; (8002b04 <Key_EdgeJudge+0x250>)
 800297c:	460b      	mov	r3, r1
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a5b      	subs	r3, r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	3302      	adds	r3, #2
 8002988:	4602      	mov	r2, r0
 800298a:	701a      	strb	r2, [r3, #0]
		if (Get_Key_Value(i) == SET)		//写入新的值
 800298c:	4b5c      	ldr	r3, [pc, #368]	; (8002b00 <Key_EdgeJudge+0x24c>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fe13 	bl	80025bc <Get_Key_Value>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <Key_EdgeJudge+0x114>
			key[i].count++;   				//最低位加1   0000 0000->0000,0001->0000 0011
 800299c:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <Key_EdgeJudge+0x24c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4958      	ldr	r1, [pc, #352]	; (8002b04 <Key_EdgeJudge+0x250>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	440b      	add	r3, r1
 80029ae:	3302      	adds	r3, #2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	3301      	adds	r3, #1
 80029b4:	b2d8      	uxtb	r0, r3
 80029b6:	4953      	ldr	r1, [pc, #332]	; (8002b04 <Key_EdgeJudge+0x250>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	440b      	add	r3, r1
 80029c2:	3302      	adds	r3, #2
 80029c4:	4602      	mov	r2, r0
 80029c6:	701a      	strb	r2, [r3, #0]

		//下降沿判断
		if (key[i].count == FALL_EDGE) {
 80029c8:	4b4d      	ldr	r3, [pc, #308]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <Key_EdgeJudge+0x250>)
 80029d0:	460b      	mov	r3, r1
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	1a5b      	subs	r3, r3, r1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	3302      	adds	r3, #2
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2bf0      	cmp	r3, #240	; 0xf0
 80029e0:	d145      	bne.n	8002a6e <Key_EdgeJudge+0x1ba>
			key[i].edge_flag = KEY_PRESS;
 80029e2:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <Key_EdgeJudge+0x250>)
 80029ea:	460b      	mov	r3, r1
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3301      	adds	r3, #1
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]

			key[i].time_up_pre[0] = key[i].time_up_pre[1];
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <Key_EdgeJudge+0x24c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a08:	4603      	mov	r3, r0
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a1b      	subs	r3, r3, r0
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	3306      	adds	r3, #6
 8002a14:	8818      	ldrh	r0, [r3, #0]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a18:	460b      	mov	r3, r1
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a5b      	subs	r3, r3, r1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	4602      	mov	r2, r0
 8002a26:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[1] = key[i].time_up;
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a36:	4603      	mov	r3, r0
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	1a1b      	subs	r3, r3, r0
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	330c      	adds	r3, #12
 8002a42:	8818      	ldrh	r0, [r3, #0]
 8002a44:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a46:	460b      	mov	r3, r1
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a5b      	subs	r3, r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	3306      	adds	r3, #6
 8002a52:	4602      	mov	r2, r0
 8002a54:	801a      	strh	r2, [r3, #0]
			key[i].time_up = 0;			//清空time_up
 8002a56:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a5e:	460b      	mov	r3, r1
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a5b      	subs	r3, r3, r1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	330c      	adds	r3, #12
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
		}

		//上升沿判断
		if (key[i].count == RISE_EDGE) {
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a76:	460b      	mov	r3, r1
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a5b      	subs	r3, r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	3302      	adds	r3, #2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d12e      	bne.n	8002ae6 <Key_EdgeJudge+0x232>
			key[i].edge_flag = KEY_FREE;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002a90:	460b      	mov	r3, r1
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a5b      	subs	r3, r3, r1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
			key[i].time_down_pre = key[i].time_down;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002aae:	4603      	mov	r3, r0
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a1b      	subs	r3, r3, r0
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	330a      	adds	r3, #10
 8002aba:	8818      	ldrh	r0, [r3, #0]
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002abe:	460b      	mov	r3, r1
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a5b      	subs	r3, r3, r1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3308      	adds	r3, #8
 8002aca:	4602      	mov	r2, r0
 8002acc:	801a      	strh	r2, [r3, #0]
			key[i].time_down = 0;		//清空time_down
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <Key_EdgeJudge+0x250>)
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a5b      	subs	r3, r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	330a      	adds	r3, #10
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <Key_EdgeJudge+0x24c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	f67f aee2 	bls.w	80028c0 <Key_EdgeJudge+0xc>
		}
	}
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000002a 	.word	0x2000002a
 8002b04:	200000b4 	.word	0x200000b4

08002b08 <Key_Timer_Interrupt>:

/*
在定时器中断中调用次函数
*/
void Key_Timer_Interrupt()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	Key_EdgeJudge();
 8002b0c:	f7ff fed2 	bl	80028b4 <Key_EdgeJudge>
	Get_Key_Time_Value();
 8002b10:	f7ff fd88 	bl	8002624 <Get_Key_Time_Value>
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <Key_Processing>:


//按键按下处理
void Key_Processing(){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
if(key[0].event!=0){
 8002b1c:	4b6e      	ldr	r3, [pc, #440]	; (8002cd8 <Key_Processing+0x1c0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <Key_Processing+0x70>
	switch(key[0].event){
 8002b24:	4b6c      	ldr	r3, [pc, #432]	; (8002cd8 <Key_Processing+0x1c0>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d825      	bhi.n	8002b7a <Key_Processing+0x62>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <Key_Processing+0x1c>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b49 	.word	0x08002b49
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002b53 	.word	0x08002b53
 8002b44:	08002b5d 	.word	0x08002b5d
		case 1:  //短按
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key0_event_1");
 8002b48:	4964      	ldr	r1, [pc, #400]	; (8002cdc <Key_Processing+0x1c4>)
 8002b4a:	4865      	ldr	r0, [pc, #404]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b4c:	f000 f9e6 	bl	8002f1c <HAL_UART_Transmit_Str>
		break;
 8002b50:	e013      	b.n	8002b7a <Key_Processing+0x62>

		case 4:  //双击
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key0_event_4");
 8002b52:	4964      	ldr	r1, [pc, #400]	; (8002ce4 <Key_Processing+0x1cc>)
 8002b54:	4862      	ldr	r0, [pc, #392]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b56:	f000 f9e1 	bl	8002f1c <HAL_UART_Transmit_Str>
		break;
 8002b5a:	e00e      	b.n	8002b7a <Key_Processing+0x62>

		case 5:  //三击
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key0_event_5");
 8002b5c:	4962      	ldr	r1, [pc, #392]	; (8002ce8 <Key_Processing+0x1d0>)
 8002b5e:	4860      	ldr	r0, [pc, #384]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b60:	f000 f9dc 	bl	8002f1c <HAL_UART_Transmit_Str>
		break;
 8002b64:	e009      	b.n	8002b7a <Key_Processing+0x62>

		case 2:  //长按
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key0_event_2");
 8002b66:	4961      	ldr	r1, [pc, #388]	; (8002cec <Key_Processing+0x1d4>)
 8002b68:	485d      	ldr	r0, [pc, #372]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b6a:	f000 f9d7 	bl	8002f1c <HAL_UART_Transmit_Str>
		break;
 8002b6e:	e004      	b.n	8002b7a <Key_Processing+0x62>

		case 3:  //超长按
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key0_event_3");
 8002b70:	495f      	ldr	r1, [pc, #380]	; (8002cf0 <Key_Processing+0x1d8>)
 8002b72:	485b      	ldr	r0, [pc, #364]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b74:	f000 f9d2 	bl	8002f1c <HAL_UART_Transmit_Str>
		break;
 8002b78:	bf00      	nop
	}
	key[0].event=0;
 8002b7a:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <Key_Processing+0x1c0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_Str(&huart1,(uint8_t*)"\r\n");
 8002b80:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <Key_Processing+0x1dc>)
 8002b82:	4857      	ldr	r0, [pc, #348]	; (8002ce0 <Key_Processing+0x1c8>)
 8002b84:	f000 f9ca 	bl	8002f1c <HAL_UART_Transmit_Str>
}

if(key[1].event!=0){
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <Key_Processing+0x1c0>)
 8002b8a:	7b9b      	ldrb	r3, [r3, #14]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d031      	beq.n	8002bf4 <Key_Processing+0xdc>

	switch(key[1].event){
 8002b90:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <Key_Processing+0x1c0>)
 8002b92:	7b9b      	ldrb	r3, [r3, #14]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d825      	bhi.n	8002be6 <Key_Processing+0xce>
 8002b9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <Key_Processing+0x88>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002bb5 	.word	0x08002bb5
 8002ba4:	08002bd3 	.word	0x08002bd3
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002bbf 	.word	0x08002bbf
 8002bb0:	08002bc9 	.word	0x08002bc9
			case 1:  //短按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key1_event_1");
 8002bb4:	4950      	ldr	r1, [pc, #320]	; (8002cf8 <Key_Processing+0x1e0>)
 8002bb6:	484a      	ldr	r0, [pc, #296]	; (8002ce0 <Key_Processing+0x1c8>)
 8002bb8:	f000 f9b0 	bl	8002f1c <HAL_UART_Transmit_Str>

			break;
 8002bbc:	e013      	b.n	8002be6 <Key_Processing+0xce>

			case 4:  //双击
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key1_event_4");
 8002bbe:	494f      	ldr	r1, [pc, #316]	; (8002cfc <Key_Processing+0x1e4>)
 8002bc0:	4847      	ldr	r0, [pc, #284]	; (8002ce0 <Key_Processing+0x1c8>)
 8002bc2:	f000 f9ab 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002bc6:	e00e      	b.n	8002be6 <Key_Processing+0xce>

			case 5:  //三击
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key1_event_5");
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <Key_Processing+0x1e8>)
 8002bca:	4845      	ldr	r0, [pc, #276]	; (8002ce0 <Key_Processing+0x1c8>)
 8002bcc:	f000 f9a6 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002bd0:	e009      	b.n	8002be6 <Key_Processing+0xce>

			case 2:  //长按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key1_event_2");
 8002bd2:	494c      	ldr	r1, [pc, #304]	; (8002d04 <Key_Processing+0x1ec>)
 8002bd4:	4842      	ldr	r0, [pc, #264]	; (8002ce0 <Key_Processing+0x1c8>)
 8002bd6:	f000 f9a1 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002bda:	e004      	b.n	8002be6 <Key_Processing+0xce>

			case 3:  //超长按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key1_event_3");
 8002bdc:	494a      	ldr	r1, [pc, #296]	; (8002d08 <Key_Processing+0x1f0>)
 8002bde:	4840      	ldr	r0, [pc, #256]	; (8002ce0 <Key_Processing+0x1c8>)
 8002be0:	f000 f99c 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002be4:	bf00      	nop

			//default:
	}
	key[1].event=0;
 8002be6:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <Key_Processing+0x1c0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	739a      	strb	r2, [r3, #14]
	HAL_UART_Transmit_Str(&huart1,(uint8_t*)"\r\n");
 8002bec:	4941      	ldr	r1, [pc, #260]	; (8002cf4 <Key_Processing+0x1dc>)
 8002bee:	483c      	ldr	r0, [pc, #240]	; (8002ce0 <Key_Processing+0x1c8>)
 8002bf0:	f000 f994 	bl	8002f1c <HAL_UART_Transmit_Str>
}

if(key[2].event!=0){
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <Key_Processing+0x1c0>)
 8002bf6:	7f1b      	ldrb	r3, [r3, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d031      	beq.n	8002c60 <Key_Processing+0x148>
	switch(key[2].event){
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <Key_Processing+0x1c0>)
 8002bfe:	7f1b      	ldrb	r3, [r3, #28]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d825      	bhi.n	8002c52 <Key_Processing+0x13a>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <Key_Processing+0xf4>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c3f 	.word	0x08002c3f
 8002c14:	08002c49 	.word	0x08002c49
 8002c18:	08002c2b 	.word	0x08002c2b
 8002c1c:	08002c35 	.word	0x08002c35
			case 1:  //短按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key2_event_1");
 8002c20:	493a      	ldr	r1, [pc, #232]	; (8002d0c <Key_Processing+0x1f4>)
 8002c22:	482f      	ldr	r0, [pc, #188]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c24:	f000 f97a 	bl	8002f1c <HAL_UART_Transmit_Str>
			//HAL_UART_Transmit_Str(&huart1,(uint8_t*)"按键0短按\0");
			break;
 8002c28:	e013      	b.n	8002c52 <Key_Processing+0x13a>

			case 4:  //双击
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key2_event_4");
 8002c2a:	4939      	ldr	r1, [pc, #228]	; (8002d10 <Key_Processing+0x1f8>)
 8002c2c:	482c      	ldr	r0, [pc, #176]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c2e:	f000 f975 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002c32:	e00e      	b.n	8002c52 <Key_Processing+0x13a>

			case 5:  //三击
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key2_event_5");
 8002c34:	4937      	ldr	r1, [pc, #220]	; (8002d14 <Key_Processing+0x1fc>)
 8002c36:	482a      	ldr	r0, [pc, #168]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c38:	f000 f970 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002c3c:	e009      	b.n	8002c52 <Key_Processing+0x13a>

			case 2:  //长按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key2_event_2");
 8002c3e:	4936      	ldr	r1, [pc, #216]	; (8002d18 <Key_Processing+0x200>)
 8002c40:	4827      	ldr	r0, [pc, #156]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c42:	f000 f96b 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002c46:	e004      	b.n	8002c52 <Key_Processing+0x13a>

			case 3:  //超长按
			HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key2_event_3");
 8002c48:	4934      	ldr	r1, [pc, #208]	; (8002d1c <Key_Processing+0x204>)
 8002c4a:	4825      	ldr	r0, [pc, #148]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c4c:	f000 f966 	bl	8002f1c <HAL_UART_Transmit_Str>
			break;
 8002c50:	bf00      	nop

			//default:
	}
	key[2].event=0;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <Key_Processing+0x1c0>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
	HAL_UART_Transmit_Str(&huart1,(uint8_t*)"\r\n");
 8002c58:	4926      	ldr	r1, [pc, #152]	; (8002cf4 <Key_Processing+0x1dc>)
 8002c5a:	4821      	ldr	r0, [pc, #132]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c5c:	f000 f95e 	bl	8002f1c <HAL_UART_Transmit_Str>
}

if(key[3].event!=0){
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <Key_Processing+0x1c0>)
 8002c62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d033      	beq.n	8002cd2 <Key_Processing+0x1ba>
	switch(key[3].event){
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <Key_Processing+0x1c0>)
 8002c6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002c70:	3b01      	subs	r3, #1
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d825      	bhi.n	8002cc2 <Key_Processing+0x1aa>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <Key_Processing+0x164>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002c91 	.word	0x08002c91
 8002c80:	08002caf 	.word	0x08002caf
 8002c84:	08002cb9 	.word	0x08002cb9
 8002c88:	08002c9b 	.word	0x08002c9b
 8002c8c:	08002ca5 	.word	0x08002ca5
				case 1:  //短按
				HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key3_event_1");
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <Key_Processing+0x208>)
 8002c92:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c94:	f000 f942 	bl	8002f1c <HAL_UART_Transmit_Str>
				//HAL_UART_Transmit_Str(&huart1,(uint8_t*)"按键0短按\0");
				break;
 8002c98:	e013      	b.n	8002cc2 <Key_Processing+0x1aa>

				case 4:  //双击
				HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key3_event_4");
 8002c9a:	4922      	ldr	r1, [pc, #136]	; (8002d24 <Key_Processing+0x20c>)
 8002c9c:	4810      	ldr	r0, [pc, #64]	; (8002ce0 <Key_Processing+0x1c8>)
 8002c9e:	f000 f93d 	bl	8002f1c <HAL_UART_Transmit_Str>
				break;
 8002ca2:	e00e      	b.n	8002cc2 <Key_Processing+0x1aa>

				case 5:  //三击
				HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key3_event_5");
 8002ca4:	4920      	ldr	r1, [pc, #128]	; (8002d28 <Key_Processing+0x210>)
 8002ca6:	480e      	ldr	r0, [pc, #56]	; (8002ce0 <Key_Processing+0x1c8>)
 8002ca8:	f000 f938 	bl	8002f1c <HAL_UART_Transmit_Str>
				break;
 8002cac:	e009      	b.n	8002cc2 <Key_Processing+0x1aa>

				case 2:  //长按
				HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key3_event_2");
 8002cae:	491f      	ldr	r1, [pc, #124]	; (8002d2c <Key_Processing+0x214>)
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <Key_Processing+0x1c8>)
 8002cb2:	f000 f933 	bl	8002f1c <HAL_UART_Transmit_Str>
				break;
 8002cb6:	e004      	b.n	8002cc2 <Key_Processing+0x1aa>

				case 3:  //超长按
				HAL_UART_Transmit_Str(&huart1,(uint8_t*)"key3_event_3");
 8002cb8:	491d      	ldr	r1, [pc, #116]	; (8002d30 <Key_Processing+0x218>)
 8002cba:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <Key_Processing+0x1c8>)
 8002cbc:	f000 f92e 	bl	8002f1c <HAL_UART_Transmit_Str>
				break;
 8002cc0:	bf00      	nop
				//default:
		}
		key[3].event=0;
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <Key_Processing+0x1c0>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		HAL_UART_Transmit_Str(&huart1,(uint8_t*)"\r\n");
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <Key_Processing+0x1dc>)
 8002ccc:	4804      	ldr	r0, [pc, #16]	; (8002ce0 <Key_Processing+0x1c8>)
 8002cce:	f000 f925 	bl	8002f1c <HAL_UART_Transmit_Str>
}

}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200000b4 	.word	0x200000b4
 8002cdc:	08002ff0 	.word	0x08002ff0
 8002ce0:	2000002c 	.word	0x2000002c
 8002ce4:	08003000 	.word	0x08003000
 8002ce8:	08003010 	.word	0x08003010
 8002cec:	08003020 	.word	0x08003020
 8002cf0:	08003030 	.word	0x08003030
 8002cf4:	08003040 	.word	0x08003040
 8002cf8:	08003044 	.word	0x08003044
 8002cfc:	08003054 	.word	0x08003054
 8002d00:	08003064 	.word	0x08003064
 8002d04:	08003074 	.word	0x08003074
 8002d08:	08003084 	.word	0x08003084
 8002d0c:	08003094 	.word	0x08003094
 8002d10:	080030a4 	.word	0x080030a4
 8002d14:	080030b4 	.word	0x080030b4
 8002d18:	080030c4 	.word	0x080030c4
 8002d1c:	080030d4 	.word	0x080030d4
 8002d20:	080030e4 	.word	0x080030e4
 8002d24:	080030f4 	.word	0x080030f4
 8002d28:	08003104 	.word	0x08003104
 8002d2c:	08003114 	.word	0x08003114
 8002d30:	08003124 	.word	0x08003124

08002d34 <Uart_Time_Even>:
Uart_Frame_Typedef uart1;										//

unsigned char uart_frame_id;


void Uart_Time_Even(void){             			//串口接收用在定时器上的事件 用来判断超时
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

		if(uart1.status !=FREE){
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02e      	beq.n	8002d9e <Uart_Time_Even+0x6a>
			uart1.time_out++;
 8002d40:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d42:	789b      	ldrb	r3, [r3, #2]
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d4a:	709a      	strb	r2, [r3, #2]

				if(uart1.time_out>=FRAME_TIMEOUT){			//完成一帧的接收
 8002d4c:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d4e:	789b      	ldrb	r3, [r3, #2]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d924      	bls.n	8002d9e <Uart_Time_Even+0x6a>
					uart1.status=FREE;						//串口标记为空闲
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]



					frame[uart1.frame_id].status=1;  		//当前缓存帧的状态 0以处理 1未处理
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <Uart_Time_Even+0x74>)
 8002d62:	2316      	movs	r3, #22
 8002d64:	fb03 f301 	mul.w	r3, r3, r1
 8002d68:	4413      	add	r3, r2
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]

					uart_frame_id=uart1.frame_id;			//传出当前缓存的编号在main中处理
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d72:	785a      	ldrb	r2, [r3, #1]
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <Uart_Time_Even+0x78>)
 8002d76:	701a      	strb	r2, [r3, #0]
				    /*
					此处添加帧处理程序
					*/
					uart_frame_id=uart1.frame_id;			//传出当前缓存的编号在main中处理
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d7a:	785a      	ldrb	r2, [r3, #1]
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <Uart_Time_Even+0x78>)
 8002d7e:	701a      	strb	r2, [r3, #0]
					uart1.frame_id++;
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	3301      	adds	r3, #1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d8a:	705a      	strb	r2, [r3, #1]

					Uart_Data_Processing();                	//数据处理 切换缓存的数组后 再处理前一个缓存中的数据避免数据覆盖
 8002d8c:	f000 f874 	bl	8002e78 <Uart_Data_Processing>

					if(uart1.frame_id >= FRAME_QUANTITY){
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d902      	bls.n	8002d9e <Uart_Time_Even+0x6a>
					uart1.frame_id=0;
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <Uart_Time_Even+0x70>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
					}
				}
		}
	}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200000ec 	.word	0x200000ec
 8002da8:	200000f0 	.word	0x200000f0
 8002dac:	2000011c 	.word	0x2000011c

08002db0 <Receive_Interrupt>:


void Receive_Interrupt(){     			//进一次串口中断
 8002db0:	b490      	push	{r4, r7}
 8002db2:	af00      	add	r7, sp, #0
	     if(uart1.status!=BUSY){
 8002db4:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d00d      	beq.n	8002dd8 <Receive_Interrupt+0x28>
					uart1.status=BUSY;
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
					frame[uart1.frame_id].length=0;
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4a29      	ldr	r2, [pc, #164]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002dca:	2316      	movs	r3, #22
 8002dcc:	fb03 f301 	mul.w	r3, r3, r1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3315      	adds	r3, #21
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			 }


	      	  	//接收一字节
	    frame[uart1.frame_id].buffer[frame[uart1.frame_id].length]=  buffer[0];
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002dda:	785b      	ldrb	r3, [r3, #1]
 8002ddc:	461c      	mov	r4, r3
 8002dde:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002de6:	2316      	movs	r3, #22
 8002de8:	fb03 f301 	mul.w	r3, r3, r1
 8002dec:	4413      	add	r3, r2
 8002dee:	3315      	adds	r3, #21
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <Receive_Interrupt+0xc4>)
 8002df6:	7819      	ldrb	r1, [r3, #0]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002dfa:	2316      	movs	r3, #22
 8002dfc:	fb03 f304 	mul.w	r3, r3, r4
 8002e00:	4413      	add	r3, r2
 8002e02:	4403      	add	r3, r0
 8002e04:	460a      	mov	r2, r1
 8002e06:	701a      	strb	r2, [r3, #0]



	     	 	frame[uart1.frame_id].length++;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	4918      	ldr	r1, [pc, #96]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002e0e:	2216      	movs	r2, #22
 8002e10:	fb02 f203 	mul.w	r2, r2, r3
 8002e14:	440a      	add	r2, r1
 8002e16:	3215      	adds	r2, #21
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	3201      	adds	r2, #1
 8002e1c:	b2d0      	uxtb	r0, r2
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002e20:	2116      	movs	r1, #22
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3315      	adds	r3, #21
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	701a      	strb	r2, [r3, #0]
				if(frame[uart1.frame_id].length>=19){
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	4619      	mov	r1, r3
 8002e34:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002e36:	2316      	movs	r3, #22
 8002e38:	fb03 f301 	mul.w	r3, r3, r1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3315      	adds	r3, #21
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b12      	cmp	r3, #18
 8002e44:	d90a      	bls.n	8002e5c <Receive_Interrupt+0xac>
				frame[uart1.frame_id].length=19;
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <Receive_Interrupt+0xc0>)
 8002e4e:	2316      	movs	r3, #22
 8002e50:	fb03 f301 	mul.w	r3, r3, r1
 8002e54:	4413      	add	r3, r2
 8002e56:	3315      	adds	r3, #21
 8002e58:	2213      	movs	r2, #19
 8002e5a:	701a      	strb	r2, [r3, #0]
				}
				uart1.time_out=0;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <Receive_Interrupt+0xbc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	709a      	strb	r2, [r3, #2]
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc90      	pop	{r4, r7}
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	200000ec 	.word	0x200000ec
 8002e70:	200000f0 	.word	0x200000f0
 8002e74:	2000006c 	.word	0x2000006c

08002e78 <Uart_Data_Processing>:

/*数据处理
 * 放在main里面处理数据
*/
void Uart_Data_Processing(){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	if(frame[uart_frame_id].status!=0){    			//接收到数据后status=1;
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <Uart_Data_Processing+0x64>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <Uart_Data_Processing+0x68>)
 8002e84:	2316      	movs	r3, #22
 8002e86:	fb03 f301 	mul.w	r3, r3, r1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d021      	beq.n	8002ed8 <Uart_Data_Processing+0x60>

	HAL_UART_Transmit(&huart1,(uint8_t*)frame[uart_frame_id].buffer,frame[uart_frame_id].length,10);
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <Uart_Data_Processing+0x64>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2316      	movs	r3, #22
 8002e9c:	fb03 f302 	mul.w	r3, r3, r2
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <Uart_Data_Processing+0x68>)
 8002ea2:	1899      	adds	r1, r3, r2
 8002ea4:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <Uart_Data_Processing+0x64>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ee0 <Uart_Data_Processing+0x68>)
 8002eac:	2316      	movs	r3, #22
 8002eae:	fb03 f300 	mul.w	r3, r3, r0
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3315      	adds	r3, #21
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	230a      	movs	r3, #10
 8002ebc:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <Uart_Data_Processing+0x6c>)
 8002ebe:	f7fe ff3e 	bl	8001d3e <HAL_UART_Transmit>

	frame[uart_frame_id].status=0;					//处理完数据后status 清0;
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <Uart_Data_Processing+0x64>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <Uart_Data_Processing+0x68>)
 8002eca:	2316      	movs	r3, #22
 8002ecc:	fb03 f301 	mul.w	r3, r3, r1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
	}
}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2000011c 	.word	0x2000011c
 8002ee0:	200000f0 	.word	0x200000f0
 8002ee4:	2000002c 	.word	0x2000002c

08002ee8 <HAL_UART_RxCpltCallback>:
 * 这个指针指向用户定义的一个数组来缓存数据
 * buffer为指向的数组名1为接收的长度
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)	// 判断是由哪个串口触发的中断
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a06      	ldr	r2, [pc, #24]	; (8002f10 <HAL_UART_RxCpltCallback+0x28>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d106      	bne.n	8002f08 <HAL_UART_RxCpltCallback+0x20>
	{
		Receive_Interrupt();
 8002efa:	f7ff ff59 	bl	8002db0 <Receive_Interrupt>

		//HAL_UART_Transmit(&huart1,(uint8_t*)"0",2,10);


		HAL_UART_Receive_IT(&huart1,buffer,1);		// 重新使能串口1接收中断
 8002efe:	2201      	movs	r2, #1
 8002f00:	4904      	ldr	r1, [pc, #16]	; (8002f14 <HAL_UART_RxCpltCallback+0x2c>)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_UART_RxCpltCallback+0x30>)
 8002f04:	f7fe ffb4 	bl	8001e70 <HAL_UART_Receive_IT>
	}
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40013800 	.word	0x40013800
 8002f14:	2000006c 	.word	0x2000006c
 8002f18:	2000002c 	.word	0x2000002c

08002f1c <HAL_UART_Transmit_Str>:

//发送字符串
void HAL_UART_Transmit_Str(UART_HandleTypeDef *huart,uint8_t *p)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
	uint8_t temp=0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]

	while(*p!='\0'){
 8002f2a:	e005      	b.n	8002f38 <HAL_UART_Transmit_Str+0x1c>
		p++;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	603b      	str	r3, [r7, #0]
		temp++;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3301      	adds	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
	while(*p!='\0'){
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f5      	bne.n	8002f2c <HAL_UART_Transmit_Str+0x10>
	}
	HAL_UART_Transmit(huart,p-temp,temp,10); //传入的值的地址不用加&
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	425b      	negs	r3, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	18d1      	adds	r1, r2, r3
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe fef5 	bl	8001d3e <HAL_UART_Transmit>

}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <__libc_init_array>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	2500      	movs	r5, #0
 8002f60:	4e0c      	ldr	r6, [pc, #48]	; (8002f94 <__libc_init_array+0x38>)
 8002f62:	4c0d      	ldr	r4, [pc, #52]	; (8002f98 <__libc_init_array+0x3c>)
 8002f64:	1ba4      	subs	r4, r4, r6
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	42a5      	cmp	r5, r4
 8002f6a:	d109      	bne.n	8002f80 <__libc_init_array+0x24>
 8002f6c:	f000 f822 	bl	8002fb4 <_init>
 8002f70:	2500      	movs	r5, #0
 8002f72:	4e0a      	ldr	r6, [pc, #40]	; (8002f9c <__libc_init_array+0x40>)
 8002f74:	4c0a      	ldr	r4, [pc, #40]	; (8002fa0 <__libc_init_array+0x44>)
 8002f76:	1ba4      	subs	r4, r4, r6
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	42a5      	cmp	r5, r4
 8002f7c:	d105      	bne.n	8002f8a <__libc_init_array+0x2e>
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f84:	4798      	blx	r3
 8002f86:	3501      	adds	r5, #1
 8002f88:	e7ee      	b.n	8002f68 <__libc_init_array+0xc>
 8002f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f8e:	4798      	blx	r3
 8002f90:	3501      	adds	r5, #1
 8002f92:	e7f2      	b.n	8002f7a <__libc_init_array+0x1e>
 8002f94:	0800314c 	.word	0x0800314c
 8002f98:	0800314c 	.word	0x0800314c
 8002f9c:	0800314c 	.word	0x0800314c
 8002fa0:	08003150 	.word	0x08003150

08002fa4 <memset>:
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4402      	add	r2, r0
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d100      	bne.n	8002fae <memset+0xa>
 8002fac:	4770      	bx	lr
 8002fae:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb2:	e7f9      	b.n	8002fa8 <memset+0x4>

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
