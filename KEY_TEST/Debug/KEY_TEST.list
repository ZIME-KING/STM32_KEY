
KEY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027d0  080027d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080027e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080027e4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ffe  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001756  00000000  00000000  00029033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002a790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000136f9  00000000  00000000  0002bd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076ef  00000000  00000000  0003f401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d9f2  00000000  00000000  00046af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b44e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dfc  00000000  00000000  000b4560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002778 	.word	0x08002778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002778 	.word	0x08002778

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fba0 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8ca 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9d4 	bl	8000504 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f90c 	bl	8000378 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000160:	f000 f95a 	bl	8000418 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f9a4 	bl	80004b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000168:	4855      	ldr	r0, [pc, #340]	; (80002c0 <main+0x174>)
 800016a:	f001 faec 	bl	8001746 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800016e:	4855      	ldr	r0, [pc, #340]	; (80002c4 <main+0x178>)
 8000170:	f001 fae9 	bl	8001746 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint8_t i;
	  i++;
 8000174:	4b54      	ldr	r3, [pc, #336]	; (80002c8 <main+0x17c>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4b52      	ldr	r3, [pc, #328]	; (80002c8 <main+0x17c>)
 800017e:	701a      	strb	r2, [r3, #0]
	  if(i>3){
 8000180:	4b51      	ldr	r3, [pc, #324]	; (80002c8 <main+0x17c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b03      	cmp	r3, #3
 8000186:	d902      	bls.n	800018e <main+0x42>
	  i=0;
 8000188:	4b4f      	ldr	r3, [pc, #316]	; (80002c8 <main+0x17c>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[i].event==1){
 800018e:	4b4e      	ldr	r3, [pc, #312]	; (80002c8 <main+0x17c>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	4619      	mov	r1, r3
 8000194:	4a4d      	ldr	r2, [pc, #308]	; (80002cc <main+0x180>)
 8000196:	460b      	mov	r3, r1
 8000198:	00db      	lsls	r3, r3, #3
 800019a:	1a5b      	subs	r3, r3, r1
 800019c:	005b      	lsls	r3, r3, #1
 800019e:	4413      	add	r3, r2
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d115      	bne.n	80001d2 <main+0x86>
		  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port,LED_TEST_Pin);
 80001a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001aa:	4849      	ldr	r0, [pc, #292]	; (80002d0 <main+0x184>)
 80001ac:	f000 fe6b 	bl	8000e86 <HAL_GPIO_TogglePin>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"1", 2,100);
 80001b0:	2364      	movs	r3, #100	; 0x64
 80001b2:	2202      	movs	r2, #2
 80001b4:	4947      	ldr	r1, [pc, #284]	; (80002d4 <main+0x188>)
 80001b6:	4848      	ldr	r0, [pc, #288]	; (80002d8 <main+0x18c>)
 80001b8:	f001 fe67 	bl	8001e8a <HAL_UART_Transmit>
		  key[i].event=0;
 80001bc:	4b42      	ldr	r3, [pc, #264]	; (80002c8 <main+0x17c>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4619      	mov	r1, r3
 80001c2:	4a42      	ldr	r2, [pc, #264]	; (80002cc <main+0x180>)
 80001c4:	460b      	mov	r3, r1
 80001c6:	00db      	lsls	r3, r3, #3
 80001c8:	1a5b      	subs	r3, r3, r1
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	4413      	add	r3, r2
 80001ce:	2200      	movs	r2, #0
 80001d0:	701a      	strb	r2, [r3, #0]
	  }
	  if(key[i].event==2){
 80001d2:	4b3d      	ldr	r3, [pc, #244]	; (80002c8 <main+0x17c>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	4619      	mov	r1, r3
 80001d8:	4a3c      	ldr	r2, [pc, #240]	; (80002cc <main+0x180>)
 80001da:	460b      	mov	r3, r1
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	1a5b      	subs	r3, r3, r1
 80001e0:	005b      	lsls	r3, r3, #1
 80001e2:	4413      	add	r3, r2
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	2b02      	cmp	r3, #2
 80001e8:	d110      	bne.n	800020c <main+0xc0>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"2", 2,100);
 80001ea:	2364      	movs	r3, #100	; 0x64
 80001ec:	2202      	movs	r2, #2
 80001ee:	493b      	ldr	r1, [pc, #236]	; (80002dc <main+0x190>)
 80001f0:	4839      	ldr	r0, [pc, #228]	; (80002d8 <main+0x18c>)
 80001f2:	f001 fe4a 	bl	8001e8a <HAL_UART_Transmit>
		  key[i].event=0;
 80001f6:	4b34      	ldr	r3, [pc, #208]	; (80002c8 <main+0x17c>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a33      	ldr	r2, [pc, #204]	; (80002cc <main+0x180>)
 80001fe:	460b      	mov	r3, r1
 8000200:	00db      	lsls	r3, r3, #3
 8000202:	1a5b      	subs	r3, r3, r1
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	4413      	add	r3, r2
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
	  }
	  if(key[i].event==3){
 800020c:	4b2e      	ldr	r3, [pc, #184]	; (80002c8 <main+0x17c>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4a2e      	ldr	r2, [pc, #184]	; (80002cc <main+0x180>)
 8000214:	460b      	mov	r3, r1
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	1a5b      	subs	r3, r3, r1
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	4413      	add	r3, r2
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d110      	bne.n	8000246 <main+0xfa>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"3", 2,100);
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	2202      	movs	r2, #2
 8000228:	492d      	ldr	r1, [pc, #180]	; (80002e0 <main+0x194>)
 800022a:	482b      	ldr	r0, [pc, #172]	; (80002d8 <main+0x18c>)
 800022c:	f001 fe2d 	bl	8001e8a <HAL_UART_Transmit>
		  key[i].event=0;
 8000230:	4b25      	ldr	r3, [pc, #148]	; (80002c8 <main+0x17c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4619      	mov	r1, r3
 8000236:	4a25      	ldr	r2, [pc, #148]	; (80002cc <main+0x180>)
 8000238:	460b      	mov	r3, r1
 800023a:	00db      	lsls	r3, r3, #3
 800023c:	1a5b      	subs	r3, r3, r1
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	4413      	add	r3, r2
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
	  }
	  if(key[i].event==4){
 8000246:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0x17c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	4619      	mov	r1, r3
 800024c:	4a1f      	ldr	r2, [pc, #124]	; (80002cc <main+0x180>)
 800024e:	460b      	mov	r3, r1
 8000250:	00db      	lsls	r3, r3, #3
 8000252:	1a5b      	subs	r3, r3, r1
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4413      	add	r3, r2
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b04      	cmp	r3, #4
 800025c:	d110      	bne.n	8000280 <main+0x134>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"4", 2,100);
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	2202      	movs	r2, #2
 8000262:	4920      	ldr	r1, [pc, #128]	; (80002e4 <main+0x198>)
 8000264:	481c      	ldr	r0, [pc, #112]	; (80002d8 <main+0x18c>)
 8000266:	f001 fe10 	bl	8001e8a <HAL_UART_Transmit>
		  key[i].event=0;
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <main+0x17c>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	4619      	mov	r1, r3
 8000270:	4a16      	ldr	r2, [pc, #88]	; (80002cc <main+0x180>)
 8000272:	460b      	mov	r3, r1
 8000274:	00db      	lsls	r3, r3, #3
 8000276:	1a5b      	subs	r3, r3, r1
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	4413      	add	r3, r2
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	  }

	  if(key[i].event==5){
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x17c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	4619      	mov	r1, r3
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <main+0x180>)
 8000288:	460b      	mov	r3, r1
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b05      	cmp	r3, #5
 8000296:	f47f af6d 	bne.w	8000174 <main+0x28>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"5", 2,100);
 800029a:	2364      	movs	r3, #100	; 0x64
 800029c:	2202      	movs	r2, #2
 800029e:	4912      	ldr	r1, [pc, #72]	; (80002e8 <main+0x19c>)
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <main+0x18c>)
 80002a2:	f001 fdf2 	bl	8001e8a <HAL_UART_Transmit>
		  key[i].event=0;
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <main+0x17c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	4619      	mov	r1, r3
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <main+0x180>)
 80002ae:	460b      	mov	r3, r1
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	1a5b      	subs	r3, r3, r1
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  {
 80002bc:	e75a      	b.n	8000174 <main+0x28>
 80002be:	bf00      	nop
 80002c0:	2000006c 	.word	0x2000006c
 80002c4:	200000ac 	.word	0x200000ac
 80002c8:	20000028 	.word	0x20000028
 80002cc:	200000f0 	.word	0x200000f0
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	08002790 	.word	0x08002790
 80002d8:	2000002c 	.word	0x2000002c
 80002dc:	08002794 	.word	0x08002794
 80002e0:	08002798 	.word	0x08002798
 80002e4:	0800279c 	.word	0x0800279c
 80002e8:	080027a0 	.word	0x080027a0

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	; 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fa34 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030e:	2301      	movs	r3, #1
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	2301      	movs	r3, #1
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fdbf 	bl	8000eb8 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000340:	f000 f94c 	bl	80005dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f001 f82a 	bl	80013b8 <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036a:	f000 f937 	bl	80005dc <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	463b      	mov	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000394:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_TIM1_Init+0x98>)
 8000396:	4a1f      	ldr	r2, [pc, #124]	; (8000414 <MX_TIM1_Init+0x9c>)
 8000398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800039a:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <MX_TIM1_Init+0x98>)
 800039c:	2247      	movs	r2, #71	; 0x47
 800039e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_TIM1_Init+0x98>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <MX_TIM1_Init+0x98>)
 80003a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ae:	4b18      	ldr	r3, [pc, #96]	; (8000410 <MX_TIM1_Init+0x98>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003b4:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_TIM1_Init+0x98>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <MX_TIM1_Init+0x98>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c0:	4813      	ldr	r0, [pc, #76]	; (8000410 <MX_TIM1_Init+0x98>)
 80003c2:	f001 f995 	bl	80016f0 <HAL_TIM_Base_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80003cc:	f000 f906 	bl	80005dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	4619      	mov	r1, r3
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <MX_TIM1_Init+0x98>)
 80003de:	f001 fadd 	bl	800199c <HAL_TIM_ConfigClockSource>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80003e8:	f000 f8f8 	bl	80005dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_TIM1_Init+0x98>)
 80003fa:	f001 fca3 	bl	8001d44 <HAL_TIMEx_MasterConfigSynchronization>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000404:	f000 f8ea 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000006c 	.word	0x2000006c
 8000414:	40012c00 	.word	0x40012c00

08000418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000434:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <MX_TIM2_Init+0x94>)
 8000436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800043c:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_TIM2_Init+0x94>)
 800043e:	2247      	movs	r2, #71	; 0x47
 8000440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <MX_TIM2_Init+0x94>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000448:	4b18      	ldr	r3, [pc, #96]	; (80004ac <MX_TIM2_Init+0x94>)
 800044a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800044e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000450:	4b16      	ldr	r3, [pc, #88]	; (80004ac <MX_TIM2_Init+0x94>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MX_TIM2_Init+0x94>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800045c:	4813      	ldr	r0, [pc, #76]	; (80004ac <MX_TIM2_Init+0x94>)
 800045e:	f001 f947 	bl	80016f0 <HAL_TIM_Base_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000468:	f000 f8b8 	bl	80005dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800046c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <MX_TIM2_Init+0x94>)
 800047a:	f001 fa8f 	bl	800199c <HAL_TIM_ConfigClockSource>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000484:	f000 f8aa 	bl	80005dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000488:	2300      	movs	r3, #0
 800048a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_TIM2_Init+0x94>)
 8000496:	f001 fc55 	bl	8001d44 <HAL_TIMEx_MasterConfigSynchronization>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004a0:	f000 f89c 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000ac 	.word	0x200000ac

080004b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_USART1_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_USART1_UART_Init+0x4c>)
 80004e8:	f001 fc82 	bl	8001df0 <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f873 	bl	80005dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	40013800 	.word	0x40013800

08000504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_GPIO_Init+0xa8>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a23      	ldr	r2, [pc, #140]	; (80005ac <MX_GPIO_Init+0xa8>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0320 	and.w	r3, r3, #32
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_GPIO_Init+0xa8>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0xa8>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a17      	ldr	r2, [pc, #92]	; (80005ac <MX_GPIO_Init+0xa8>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_GPIO_Init+0xa8>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	4812      	ldr	r0, [pc, #72]	; (80005b0 <MX_GPIO_Init+0xac>)
 8000568:	f000 fc75 	bl	8000e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 800056c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2302      	movs	r3, #2
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <MX_GPIO_Init+0xac>)
 8000586:	f000 faf5 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_3_Pin KEY_2_Pin KEY_1_Pin KET_0_Pin */
  GPIO_InitStruct.Pin = KEY_3_Pin|KEY_2_Pin|KEY_1_Pin|KET_0_Pin;
 800058a:	23f0      	movs	r3, #240	; 0xf0
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0xac>)
 800059e:	f000 fae9 	bl	8000b74 <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	//static uint16_t i;
	if(htim->Instance==htim1.Instance){
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d103      	bne.n	80005d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		Key_EdgeJudge();
 80005c8:	f001 ff98 	bl	80024fc <Key_EdgeJudge>
		Get_Key_Time_Value();
 80005cc:	f001 fe4e 	bl	800226c <Get_Key_Time_Value>
	 	//HAL_GPIO_TogglePin(LED_TEST_GPIO_Port,LED_TEST_Pin);
	}
	if(htim->Instance==htim2.Instance){

	}
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000006c 	.word	0x2000006c

080005dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_MspInit+0x5c>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6193      	str	r3, [r2, #24]
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_MspInit+0x5c>)
 800060c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_MspInit+0x60>)
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_MspInit+0x60>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	40010000 	.word	0x40010000

0800064c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_TIM_Base_MspInit+0x78>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d114      	bne.n	8000688 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 8000664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2019      	movs	r0, #25
 800067c:	f000 fa43 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000680:	2019      	movs	r0, #25
 8000682:	f000 fa5c 	bl	8000b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000686:	e018      	b.n	80006ba <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000690:	d113      	bne.n	80006ba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_TIM_Base_MspInit+0x7c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	201c      	movs	r0, #28
 80006b0:	f000 fa29 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006b4:	201c      	movs	r0, #28
 80006b6:	f000 fa42 	bl	8000b3e <HAL_NVIC_EnableIRQ>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012c00 	.word	0x40012c00
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d131      	bne.n	8000750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_UART_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a1a      	ldr	r2, [pc, #104]	; (800075c <HAL_UART_MspInit+0x90>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_UART_MspInit+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_MspInit+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_UART_MspInit+0x90>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_UART_MspInit+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000726:	2303      	movs	r3, #3
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <HAL_UART_MspInit+0x94>)
 8000732:	f000 fa1f 	bl	8000b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <HAL_UART_MspInit+0x94>)
 800074c:	f000 fa12 	bl	8000b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013800 	.word	0x40013800
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <HardFault_Handler+0x4>

08000776 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <BusFault_Handler+0x4>

08000782 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <UsageFault_Handler+0x4>

08000788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 f8b6 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TIM1_UP_IRQHandler+0x10>)
 80007be:	f000 ffe5 	bl	800178c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000006c 	.word	0x2000006c

080007cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <TIM2_IRQHandler+0x10>)
 80007d2:	f000 ffdb 	bl	800178c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000ac 	.word	0x200000ac

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <SystemInit+0x5c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <SystemInit+0x5c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <SystemInit+0x5c>)
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4911      	ldr	r1, [pc, #68]	; (800083c <SystemInit+0x5c>)
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <SystemInit+0x60>)
 80007f8:	4013      	ands	r3, r2
 80007fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <SystemInit+0x5c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <SystemInit+0x5c>)
 8000802:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800080c:	4b0b      	ldr	r3, [pc, #44]	; (800083c <SystemInit+0x5c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SystemInit+0x5c>)
 8000812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000816:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <SystemInit+0x5c>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <SystemInit+0x5c>)
 800081e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000822:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <SystemInit+0x5c>)
 8000826:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800082a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SystemInit+0x64>)
 800082e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000832:	609a      	str	r2, [r3, #8]
#endif 
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40021000 	.word	0x40021000
 8000840:	f8ff0000 	.word	0xf8ff0000
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000848:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800084a:	e003      	b.n	8000854 <LoopCopyDataInit>

0800084c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800084e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000850:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000852:	3104      	adds	r1, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000854:	480a      	ldr	r0, [pc, #40]	; (8000880 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000858:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800085a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800085c:	d3f6      	bcc.n	800084c <CopyDataInit>
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000860:	e002      	b.n	8000868 <LoopFillZerobss>

08000862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000864:	f842 3b04 	str.w	r3, [r2], #4

08000868 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800086a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800086c:	d3f9      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086e:	f7ff ffb7 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 ff55 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fc69 	bl	800014c <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r3, =_sidata
 800087c:	080027d8 	.word	0x080027d8
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000888:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800088c:	20000128 	.word	0x20000128

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f923 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff fe9a 	bl	80005e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f93b 	bl	8000b5a <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f903 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000008 	.word	0x20000008
 8000940:	200000ec 	.word	0x200000ec

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	200000ec 	.word	0x200000ec

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <__NVIC_EnableIRQ+0x34>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff90 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff2d 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff42 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff90 	bl	8000a48 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5f 	bl	80009f4 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff35 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffa2 	bl	8000aac <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	e127      	b.n	8000dd8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 8116 	bne.w	8000dd2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d034      	beq.n	8000c18 <HAL_GPIO_Init+0xa4>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d80d      	bhi.n	8000bce <HAL_GPIO_Init+0x5a>
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d02b      	beq.n	8000c0e <HAL_GPIO_Init+0x9a>
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d804      	bhi.n	8000bc4 <HAL_GPIO_Init+0x50>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d031      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d01c      	beq.n	8000bfc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc2:	e048      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d043      	beq.n	8000c50 <HAL_GPIO_Init+0xdc>
 8000bc8:	2b11      	cmp	r3, #17
 8000bca:	d01b      	beq.n	8000c04 <HAL_GPIO_Init+0x90>
          break;
 8000bcc:	e043      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bce:	4a89      	ldr	r2, [pc, #548]	; (8000df4 <HAL_GPIO_Init+0x280>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d026      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
 8000bd4:	4a87      	ldr	r2, [pc, #540]	; (8000df4 <HAL_GPIO_Init+0x280>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d806      	bhi.n	8000be8 <HAL_GPIO_Init+0x74>
 8000bda:	4a87      	ldr	r2, [pc, #540]	; (8000df8 <HAL_GPIO_Init+0x284>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d020      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
 8000be0:	4a86      	ldr	r2, [pc, #536]	; (8000dfc <HAL_GPIO_Init+0x288>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d01d      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
          break;
 8000be6:	e036      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000be8:	4a85      	ldr	r2, [pc, #532]	; (8000e00 <HAL_GPIO_Init+0x28c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d019      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
 8000bee:	4a85      	ldr	r2, [pc, #532]	; (8000e04 <HAL_GPIO_Init+0x290>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d016      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
 8000bf4:	4a84      	ldr	r2, [pc, #528]	; (8000e08 <HAL_GPIO_Init+0x294>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d013      	beq.n	8000c22 <HAL_GPIO_Init+0xae>
          break;
 8000bfa:	e02c      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e028      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e023      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	3308      	adds	r3, #8
 8000c14:	623b      	str	r3, [r7, #32]
          break;
 8000c16:	e01e      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	330c      	adds	r3, #12
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e019      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e012      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d105      	bne.n	8000c44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	611a      	str	r2, [r3, #16]
          break;
 8000c42:	e008      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c44:	2308      	movs	r3, #8
 8000c46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	615a      	str	r2, [r3, #20]
          break;
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
          break;
 8000c54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	2bff      	cmp	r3, #255	; 0xff
 8000c5a:	d801      	bhi.n	8000c60 <HAL_GPIO_Init+0xec>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	e001      	b.n	8000c64 <HAL_GPIO_Init+0xf0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3304      	adds	r3, #4
 8000c64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d802      	bhi.n	8000c72 <HAL_GPIO_Init+0xfe>
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	e002      	b.n	8000c78 <HAL_GPIO_Init+0x104>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	3b08      	subs	r3, #8
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	210f      	movs	r1, #15
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	401a      	ands	r2, r3
 8000c8a:	6a39      	ldr	r1, [r7, #32]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 8096 	beq.w	8000dd2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca6:	4b59      	ldr	r3, [pc, #356]	; (8000e0c <HAL_GPIO_Init+0x298>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a58      	ldr	r2, [pc, #352]	; (8000e0c <HAL_GPIO_Init+0x298>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b56      	ldr	r3, [pc, #344]	; (8000e0c <HAL_GPIO_Init+0x298>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cbe:	4a54      	ldr	r2, [pc, #336]	; (8000e10 <HAL_GPIO_Init+0x29c>)
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4b      	ldr	r2, [pc, #300]	; (8000e14 <HAL_GPIO_Init+0x2a0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x19e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4a      	ldr	r2, [pc, #296]	; (8000e18 <HAL_GPIO_Init+0x2a4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x19a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a49      	ldr	r2, [pc, #292]	; (8000e1c <HAL_GPIO_Init+0x2a8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x196>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <HAL_GPIO_Init+0x2ac>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x192>
 8000d02:	2303      	movs	r3, #3
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x1a0>
 8000d06:	2304      	movs	r3, #4
 8000d08:	e004      	b.n	8000d14 <HAL_GPIO_Init+0x1a0>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_Init+0x1a0>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x1a0>
 8000d12:	2300      	movs	r3, #0
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	f002 0203 	and.w	r2, r2, #3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d24:	493a      	ldr	r1, [pc, #232]	; (8000e10 <HAL_GPIO_Init+0x29c>)
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3e:	4b39      	ldr	r3, [pc, #228]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4938      	ldr	r1, [pc, #224]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4933      	ldr	r1, [pc, #204]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	492e      	ldr	r1, [pc, #184]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	604b      	str	r3, [r1, #4]
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4929      	ldr	r1, [pc, #164]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4924      	ldr	r1, [pc, #144]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	491f      	ldr	r1, [pc, #124]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	491a      	ldr	r1, [pc, #104]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60cb      	str	r3, [r1, #12]
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4915      	ldr	r1, [pc, #84]	; (8000e24 <HAL_GPIO_Init+0x2b0>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f47f aed0 	bne.w	8000b88 <HAL_GPIO_Init+0x14>
  }
}
 8000de8:	bf00      	nop
 8000dea:	372c      	adds	r7, #44	; 0x2c
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	10120000 	.word	0x10120000
 8000e00:	10310000 	.word	0x10310000
 8000e04:	10320000 	.word	0x10320000
 8000e08:	10220000 	.word	0x10220000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40011400 	.word	0x40011400
 8000e24:	40010400 	.word	0x40010400

08000e28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e001      	b.n	8000e4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e72:	e003      	b.n	8000e7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	041a      	lsls	r2, r3, #16
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	611a      	str	r2, [r3, #16]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e26c      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 8087 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ed8:	4b92      	ldr	r3, [pc, #584]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d00c      	beq.n	8000efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee4:	4b8f      	ldr	r3, [pc, #572]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d112      	bne.n	8000f16 <HAL_RCC_OscConfig+0x5e>
 8000ef0:	4b8c      	ldr	r3, [pc, #560]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efc:	d10b      	bne.n	8000f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efe:	4b89      	ldr	r3, [pc, #548]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d06c      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x12c>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d168      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e246      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1e:	d106      	bne.n	8000f2e <HAL_RCC_OscConfig+0x76>
 8000f20:	4b80      	ldr	r3, [pc, #512]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a7f      	ldr	r2, [pc, #508]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e02e      	b.n	8000f8c <HAL_RCC_OscConfig+0xd4>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x98>
 8000f36:	4b7b      	ldr	r3, [pc, #492]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a7a      	ldr	r2, [pc, #488]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b78      	ldr	r3, [pc, #480]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a77      	ldr	r2, [pc, #476]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e01d      	b.n	8000f8c <HAL_RCC_OscConfig+0xd4>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0xbc>
 8000f5a:	4b72      	ldr	r3, [pc, #456]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a71      	ldr	r2, [pc, #452]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b6f      	ldr	r3, [pc, #444]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e00b      	b.n	8000f8c <HAL_RCC_OscConfig+0xd4>
 8000f74:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a6a      	ldr	r2, [pc, #424]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b68      	ldr	r3, [pc, #416]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a67      	ldr	r2, [pc, #412]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fcd6 	bl	8000944 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fcd2 	bl	8000944 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1fa      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0xe4>
 8000fba:	e014      	b.n	8000fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fcc2 	bl	8000944 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fcbe 	bl	8000944 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e1e6      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	4b53      	ldr	r3, [pc, #332]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x10c>
 8000fe2:	e000      	b.n	8000fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d063      	beq.n	80010ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b08      	cmp	r3, #8
 8001008:	d11c      	bne.n	8001044 <HAL_RCC_OscConfig+0x18c>
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d116      	bne.n	8001044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	4b43      	ldr	r3, [pc, #268]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_RCC_OscConfig+0x176>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1ba      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102e:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4939      	ldr	r1, [pc, #228]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	e03a      	b.n	80010ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_RCC_OscConfig+0x270>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fc77 	bl	8000944 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fc73 	bl	8000944 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e19b      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4927      	ldr	r1, [pc, #156]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_RCC_OscConfig+0x270>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fc56 	bl	8000944 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fc52 	bl	8000944 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e17a      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03a      	beq.n	800113c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d019      	beq.n	8001102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_RCC_OscConfig+0x274>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc36 	bl	8000944 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc32 	bl	8000944 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e15a      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 fada 	bl	80016b4 <RCC_Delay>
 8001100:	e01c      	b.n	800113c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_RCC_OscConfig+0x274>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fc1c 	bl	8000944 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110e:	e00f      	b.n	8001130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fc18 	bl	8000944 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d908      	bls.n	8001130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e140      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	42420000 	.word	0x42420000
 800112c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b9e      	ldr	r3, [pc, #632]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1e9      	bne.n	8001110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a6 	beq.w	8001296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b97      	ldr	r3, [pc, #604]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b94      	ldr	r3, [pc, #592]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a93      	ldr	r2, [pc, #588]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b91      	ldr	r3, [pc, #580]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001172:	2301      	movs	r3, #1
 8001174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4b8e      	ldr	r3, [pc, #568]	; (80013b0 <HAL_RCC_OscConfig+0x4f8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001182:	4b8b      	ldr	r3, [pc, #556]	; (80013b0 <HAL_RCC_OscConfig+0x4f8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a8a      	ldr	r2, [pc, #552]	; (80013b0 <HAL_RCC_OscConfig+0x4f8>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff fbd9 	bl	8000944 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001196:	f7ff fbd5 	bl	8000944 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b64      	cmp	r3, #100	; 0x64
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e0fd      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	4b81      	ldr	r3, [pc, #516]	; (80013b0 <HAL_RCC_OscConfig+0x4f8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d106      	bne.n	80011ca <HAL_RCC_OscConfig+0x312>
 80011bc:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	e02d      	b.n	8001226 <HAL_RCC_OscConfig+0x36e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x334>
 80011d2:	4b76      	ldr	r3, [pc, #472]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a75      	ldr	r2, [pc, #468]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b73      	ldr	r3, [pc, #460]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	e01c      	b.n	8001226 <HAL_RCC_OscConfig+0x36e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d10c      	bne.n	800120e <HAL_RCC_OscConfig+0x356>
 80011f4:	4b6d      	ldr	r3, [pc, #436]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	4a6c      	ldr	r2, [pc, #432]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6213      	str	r3, [r2, #32]
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a69      	ldr	r2, [pc, #420]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6213      	str	r3, [r2, #32]
 800120c:	e00b      	b.n	8001226 <HAL_RCC_OscConfig+0x36e>
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a66      	ldr	r2, [pc, #408]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b64      	ldr	r3, [pc, #400]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a63      	ldr	r2, [pc, #396]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d015      	beq.n	800125a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb89 	bl	8000944 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb85 	bl	8000944 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0ab      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124c:	4b57      	ldr	r3, [pc, #348]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0ee      	beq.n	8001236 <HAL_RCC_OscConfig+0x37e>
 8001258:	e014      	b.n	8001284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb73 	bl	8000944 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fb6f 	bl	8000944 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e095      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001278:	4b4c      	ldr	r3, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1ee      	bne.n	8001262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d105      	bne.n	8001296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128a:	4b48      	ldr	r3, [pc, #288]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8081 	beq.w	80013a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a0:	4b42      	ldr	r3, [pc, #264]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d061      	beq.n	8001370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d146      	bne.n	8001342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b4:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <HAL_RCC_OscConfig+0x4fc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb43 	bl	8000944 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c2:	f7ff fb3f 	bl	8000944 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e067      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d108      	bne.n	80012fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ea:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	492d      	ldr	r1, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012fc:	4b2b      	ldr	r3, [pc, #172]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a19      	ldr	r1, [r3, #32]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	430b      	orrs	r3, r1
 800130e:	4927      	ldr	r1, [pc, #156]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_RCC_OscConfig+0x4fc>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fb13 	bl	8000944 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001322:	f7ff fb0f 	bl	8000944 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e037      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x46a>
 8001340:	e02f      	b.n	80013a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_RCC_OscConfig+0x4fc>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fafc 	bl	8000944 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001350:	f7ff faf8 	bl	8000944 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e020      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_OscConfig+0x498>
 800136e:	e018      	b.n	80013a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e013      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x4f4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	429a      	cmp	r2, r3
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40007000 	.word	0x40007000
 80013b4:	42420060 	.word	0x42420060

080013b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0d0      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d910      	bls.n	80013fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013da:	4b67      	ldr	r3, [pc, #412]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 0207 	bic.w	r2, r3, #7
 80013e2:	4965      	ldr	r1, [pc, #404]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d001      	beq.n	80013fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e0b8      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001414:	4b59      	ldr	r3, [pc, #356]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a58      	ldr	r2, [pc, #352]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800141e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a52      	ldr	r2, [pc, #328]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001438:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	494d      	ldr	r1, [pc, #308]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d040      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d115      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e07f      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e073      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06b      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f023 0203 	bic.w	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4936      	ldr	r1, [pc, #216]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014a8:	f7ff fa4c 	bl	8000944 <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b0:	f7ff fa48 	bl	8000944 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e053      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 020c 	and.w	r2, r3, #12
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1eb      	bne.n	80014b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d210      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 0207 	bic.w	r2, r3, #7
 80014ee:	4922      	ldr	r1, [pc, #136]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d001      	beq.n	8001508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e032      	b.n	800156e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4916      	ldr	r1, [pc, #88]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001546:	f000 f821 	bl	800158c <HAL_RCC_GetSysClockFreq>
 800154a:	4601      	mov	r1, r0
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_ClockConfig+0x1c4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_RCC_ClockConfig+0x1c8>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	fa21 f303 	lsr.w	r3, r1, r3
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_RCC_ClockConfig+0x1cc>)
 8001560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_ClockConfig+0x1d0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f9aa 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000
 800157c:	40021000 	.word	0x40021000
 8001580:	080027b8 	.word	0x080027b8
 8001584:	20000000 	.word	0x20000000
 8001588:	20000004 	.word	0x20000004

0800158c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800158c:	b490      	push	{r4, r7}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001594:	1d3c      	adds	r4, r7, #4
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800159c:	4b28      	ldr	r3, [pc, #160]	; (8001640 <HAL_RCC_GetSysClockFreq+0xb4>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d002      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x40>
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d003      	beq.n	80015d2 <HAL_RCC_GetSysClockFreq+0x46>
 80015ca:	e02d      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ce:	623b      	str	r3, [r7, #32]
      break;
 80015d0:	e02d      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	0c9b      	lsrs	r3, r3, #18
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015de:	4413      	add	r3, r2
 80015e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	0c5b      	lsrs	r3, r3, #17
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015fe:	4413      	add	r3, r2
 8001600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800160a:	fb02 f203 	mul.w	r2, r2, r3
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	fbb2 f3f3 	udiv	r3, r2, r3
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e004      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_RCC_GetSysClockFreq+0xc0>)
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	623b      	str	r3, [r7, #32]
      break;
 8001626:	e002      	b.n	800162e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800162a:	623b      	str	r3, [r7, #32]
      break;
 800162c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800162e:	6a3b      	ldr	r3, [r7, #32]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bc90      	pop	{r4, r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	080027a4 	.word	0x080027a4
 8001640:	080027b4 	.word	0x080027b4
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	003d0900 	.word	0x003d0900

08001650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_RCC_GetHCLKFreq+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000000 	.word	0x20000000

08001664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001668:	f7ff fff2 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 800166c:	4601      	mov	r1, r0
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	080027c8 	.word	0x080027c8

0800168c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001690:	f7ff ffde 	bl	8001650 <HAL_RCC_GetHCLKFreq>
 8001694:	4601      	mov	r1, r0
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	0adb      	lsrs	r3, r3, #11
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40021000 	.word	0x40021000
 80016b0:	080027c8 	.word	0x080027c8

080016b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <RCC_Delay+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <RCC_Delay+0x38>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0a5b      	lsrs	r3, r3, #9
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016d0:	bf00      	nop
  }
  while (Delay --);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <RCC_Delay+0x1c>
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000000 	.word	0x20000000
 80016ec:	10624dd3 	.word	0x10624dd3

080016f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e01d      	b.n	800173e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff98 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3304      	adds	r3, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f000 fa10 	bl	8001b54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0201 	orr.w	r2, r2, #1
 800175c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b06      	cmp	r3, #6
 800176e:	d007      	beq.n	8001780 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d122      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d11b      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f06f 0202 	mvn.w	r2, #2
 80017b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9a4 	bl	8001b1c <HAL_TIM_IC_CaptureCallback>
 80017d4:	e005      	b.n	80017e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f997 	bl	8001b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f9a6 	bl	8001b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0204 	mvn.w	r2, #4
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2202      	movs	r2, #2
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f97a 	bl	8001b1c <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f96d 	bl	8001b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f97c 	bl	8001b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b08      	cmp	r3, #8
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b08      	cmp	r3, #8
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0208 	mvn.w	r2, #8
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f950 	bl	8001b1c <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f943 	bl	8001b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f952 	bl	8001b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b10      	cmp	r3, #16
 800189c:	d122      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d11b      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0210 	mvn.w	r2, #16
 80018b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2208      	movs	r2, #8
 80018ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f926 	bl	8001b1c <HAL_TIM_IC_CaptureCallback>
 80018d0:	e005      	b.n	80018de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f919 	bl	8001b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f928 	bl	8001b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0201 	mvn.w	r2, #1
 8001908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe fe52 	bl	80005b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b80      	cmp	r3, #128	; 0x80
 800191c:	d10e      	bne.n	800193c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	2b80      	cmp	r3, #128	; 0x80
 800192a:	d107      	bne.n	800193c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fa51 	bl	8001dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b40      	cmp	r3, #64	; 0x40
 8001948:	d10e      	bne.n	8001968 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d107      	bne.n	8001968 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8ec 	bl	8001b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b20      	cmp	r3, #32
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b20      	cmp	r3, #32
 8001982:	d107      	bne.n	8001994 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0220 	mvn.w	r2, #32
 800198c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fa1c 	bl	8001dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_TIM_ConfigClockSource+0x18>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e0a6      	b.n	8001b02 <HAL_TIM_ConfigClockSource+0x166>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80019d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b40      	cmp	r3, #64	; 0x40
 80019ea:	d067      	beq.n	8001abc <HAL_TIM_ConfigClockSource+0x120>
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d80b      	bhi.n	8001a08 <HAL_TIM_ConfigClockSource+0x6c>
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d073      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0x140>
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d802      	bhi.n	80019fe <HAL_TIM_ConfigClockSource+0x62>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d06f      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80019fc:	e078      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d06c      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0x140>
 8001a02:	2b30      	cmp	r3, #48	; 0x30
 8001a04:	d06a      	beq.n	8001adc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a06:	e073      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a08:	2b70      	cmp	r3, #112	; 0x70
 8001a0a:	d00d      	beq.n	8001a28 <HAL_TIM_ConfigClockSource+0x8c>
 8001a0c:	2b70      	cmp	r3, #112	; 0x70
 8001a0e:	d804      	bhi.n	8001a1a <HAL_TIM_ConfigClockSource+0x7e>
 8001a10:	2b50      	cmp	r3, #80	; 0x50
 8001a12:	d033      	beq.n	8001a7c <HAL_TIM_ConfigClockSource+0xe0>
 8001a14:	2b60      	cmp	r3, #96	; 0x60
 8001a16:	d041      	beq.n	8001a9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a18:	e06a      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1e:	d066      	beq.n	8001aee <HAL_TIM_ConfigClockSource+0x152>
 8001a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a24:	d017      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a26:	e063      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f000 f965 	bl	8001d06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]
      break;
 8001a54:	e04c      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6899      	ldr	r1, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f000 f94e 	bl	8001d06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a78:	609a      	str	r2, [r3, #8]
      break;
 8001a7a:	e039      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f000 f8c5 	bl	8001c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2150      	movs	r1, #80	; 0x50
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f91c 	bl	8001cd2 <TIM_ITRx_SetConfig>
      break;
 8001a9a:	e029      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f000 f8e3 	bl	8001c74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2160      	movs	r1, #96	; 0x60
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f90c 	bl	8001cd2 <TIM_ITRx_SetConfig>
      break;
 8001aba:	e019      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6859      	ldr	r1, [r3, #4]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f000 f8a5 	bl	8001c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f8fc 	bl	8001cd2 <TIM_ITRx_SetConfig>
      break;
 8001ada:	e009      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	f000 f8f3 	bl	8001cd2 <TIM_ITRx_SetConfig>
      break;
 8001aec:	e000      	b.n	8001af0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a29      	ldr	r2, [pc, #164]	; (8001c0c <TIM_Base_SetConfig+0xb8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d00b      	beq.n	8001b84 <TIM_Base_SetConfig+0x30>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b72:	d007      	beq.n	8001b84 <TIM_Base_SetConfig+0x30>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a26      	ldr	r2, [pc, #152]	; (8001c10 <TIM_Base_SetConfig+0xbc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <TIM_Base_SetConfig+0x30>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a25      	ldr	r2, [pc, #148]	; (8001c14 <TIM_Base_SetConfig+0xc0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d108      	bne.n	8001b96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <TIM_Base_SetConfig+0xb8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00b      	beq.n	8001bb6 <TIM_Base_SetConfig+0x62>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d007      	beq.n	8001bb6 <TIM_Base_SetConfig+0x62>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <TIM_Base_SetConfig+0xbc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d003      	beq.n	8001bb6 <TIM_Base_SetConfig+0x62>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <TIM_Base_SetConfig+0xc0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d108      	bne.n	8001bc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <TIM_Base_SetConfig+0xb8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d103      	bne.n	8001bfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	615a      	str	r2, [r3, #20]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40000800 	.word	0x40000800

08001c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f023 0201 	bic.w	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f023 030a 	bic.w	r3, r3, #10
 8001c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	621a      	str	r2, [r3, #32]
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f023 0210 	bic.w	r2, r3, #16
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	031b      	lsls	r3, r3, #12
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	621a      	str	r2, [r3, #32]
}
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f043 0307 	orr.w	r3, r3, #7
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b087      	sub	sp, #28
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	021a      	lsls	r2, r3, #8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	609a      	str	r2, [r3, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e032      	b.n	8001dc2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d94:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e03f      	b.n	8001e82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fc58 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f90b 	bl	8002050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b088      	sub	sp, #32
 8001e8e:	af02      	add	r7, sp, #8
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	f040 8083 	bne.w	8001fb2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_UART_Transmit+0x2e>
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e07b      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Transmit+0x40>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e074      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2221      	movs	r2, #33	; 0x21
 8001edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fd30 	bl	8000944 <HAL_GetTick>
 8001ee4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef2:	e042      	b.n	8001f7a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	d122      	bne.n	8001f52 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	2180      	movs	r1, #128	; 0x80
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f850 	bl	8001fbc <UART_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e046      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f38:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3302      	adds	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	e017      	b.n	8001f7a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	e013      	b.n	8001f7a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f82d 	bl	8001fbc <UART_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e023      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1b7      	bne.n	8001ef4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f814 	bl	8001fbc <UART_WaitOnFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e00a      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fb2:	2302      	movs	r3, #2
  }
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fcc:	e02c      	b.n	8002028 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d028      	beq.n	8002028 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <UART_WaitOnFlagUntilTimeout+0x30>
 8001fdc:	f7fe fcb2 	bl	8000944 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21d      	bcs.n	8002028 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ffa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e00f      	b.n	8002048 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	4013      	ands	r3, r2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	429a      	cmp	r2, r3
 8002044:	d0c3      	beq.n	8001fce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800208a:	f023 030c 	bic.w	r3, r3, #12
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	430b      	orrs	r3, r1
 8002096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a52      	ldr	r2, [pc, #328]	; (80021fc <UART_SetConfig+0x1ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d14e      	bne.n	8002156 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020b8:	f7ff fae8 	bl	800168c <HAL_RCC_GetPCLK2Freq>
 80020bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009a      	lsls	r2, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <UART_SetConfig+0x1b0>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	0119      	lsls	r1, r3, #4
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009a      	lsls	r2, r3, #2
 80020e8:	441a      	add	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	4b42      	ldr	r3, [pc, #264]	; (8002200 <UART_SetConfig+0x1b0>)
 80020f6:	fba3 0302 	umull	r0, r3, r3, r2
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	fb00 f303 	mul.w	r3, r0, r3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	3332      	adds	r3, #50	; 0x32
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <UART_SetConfig+0x1b0>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002114:	4419      	add	r1, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009a      	lsls	r2, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb2 f2f3 	udiv	r2, r2, r3
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <UART_SetConfig+0x1b0>)
 800212e:	fba3 0302 	umull	r0, r3, r3, r2
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2064      	movs	r0, #100	; 0x64
 8002136:	fb00 f303 	mul.w	r3, r0, r3
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	3332      	adds	r3, #50	; 0x32
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <UART_SetConfig+0x1b0>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	440a      	add	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002154:	e04d      	b.n	80021f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002156:	f7ff fa85 	bl	8001664 <HAL_RCC_GetPCLK1Freq>
 800215a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009a      	lsls	r2, r3, #2
 8002166:	441a      	add	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <UART_SetConfig+0x1b0>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	0119      	lsls	r1, r3, #4
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009a      	lsls	r2, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <UART_SetConfig+0x1b0>)
 8002194:	fba3 0302 	umull	r0, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2064      	movs	r0, #100	; 0x64
 800219c:	fb00 f303 	mul.w	r3, r0, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	3332      	adds	r3, #50	; 0x32
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <UART_SetConfig+0x1b0>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b2:	4419      	add	r1, r3
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	009a      	lsls	r2, r3, #2
 80021be:	441a      	add	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <UART_SetConfig+0x1b0>)
 80021cc:	fba3 0302 	umull	r0, r3, r3, r2
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	2064      	movs	r0, #100	; 0x64
 80021d4:	fb00 f303 	mul.w	r3, r0, r3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <UART_SetConfig+0x1b0>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	f003 020f 	and.w	r2, r3, #15
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	440a      	add	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40013800 	.word	0x40013800
 8002200:	51eb851f 	.word	0x51eb851f

08002204 <Get_Key_Value>:
/********************
 **功能：获取按键状态
 **输入按键的编号
 **返回值：1/0
 ********************/
static uint8_t Get_Key_Value(unsigned char temp) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
	switch (temp) {
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d823      	bhi.n	800225c <Get_Key_Value+0x58>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <Get_Key_Value+0x18>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	08002239 	.word	0x08002239
 8002224:	08002245 	.word	0x08002245
 8002228:	08002251 	.word	0x08002251
	case 0:
		return KEY0_READ;
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	480e      	ldr	r0, [pc, #56]	; (8002268 <Get_Key_Value+0x64>)
 8002230:	f7fe fdfa 	bl	8000e28 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	e012      	b.n	800225e <Get_Key_Value+0x5a>
		break;

	case 1:
		return KEY1_READ;
 8002238:	2140      	movs	r1, #64	; 0x40
 800223a:	480b      	ldr	r0, [pc, #44]	; (8002268 <Get_Key_Value+0x64>)
 800223c:	f7fe fdf4 	bl	8000e28 <HAL_GPIO_ReadPin>
 8002240:	4603      	mov	r3, r0
 8002242:	e00c      	b.n	800225e <Get_Key_Value+0x5a>
		break;

	case 2:
		return KEY2_READ;
 8002244:	2120      	movs	r1, #32
 8002246:	4808      	ldr	r0, [pc, #32]	; (8002268 <Get_Key_Value+0x64>)
 8002248:	f7fe fdee 	bl	8000e28 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	e006      	b.n	800225e <Get_Key_Value+0x5a>
		break;

	case 3:
		return KEY3_READ;
 8002250:	2110      	movs	r1, #16
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <Get_Key_Value+0x64>)
 8002254:	f7fe fde8 	bl	8000e28 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	e000      	b.n	800225e <Get_Key_Value+0x5a>
		break;

	default:
		return 0;
 800225c:	2300      	movs	r3, #0
		break;
	}
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40010c00 	.word	0x40010c00

0800226c <Get_Key_Time_Value>:

/********************************
 函数功能：获取键按下 和抬起时间的值
 *******************************/
void Get_Key_Time_Value() {
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	static uint8_t i;						//加了static进入函数不会给清零，要么整个全局边量
	for (i = 0; i < KEY_NUMBER; i++) {
 8002270:	4b3a      	ldr	r3, [pc, #232]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e068      	b.n	800234a <Get_Key_Time_Value+0xde>
		if (key[i].edge_flag == KEY_PRESS) //如果按键按下（下降沿）开始计时到松开结束
 8002278:	4b38      	ldr	r3, [pc, #224]	; (800235c <Get_Key_Time_Value+0xf0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4a38      	ldr	r2, [pc, #224]	; (8002360 <Get_Key_Time_Value+0xf4>)
 8002280:	460b      	mov	r3, r1
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	1a5b      	subs	r3, r3, r1
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d116      	bne.n	80022c0 <Get_Key_Time_Value+0x54>
			key[i].time_down++;
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	4931      	ldr	r1, [pc, #196]	; (8002360 <Get_Key_Time_Value+0xf4>)
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	330a      	adds	r3, #10
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b298      	uxth	r0, r3
 80022ac:	492c      	ldr	r1, [pc, #176]	; (8002360 <Get_Key_Time_Value+0xf4>)
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	330a      	adds	r3, #10
 80022ba:	4602      	mov	r2, r0
 80022bc:	801a      	strh	r2, [r3, #0]
 80022be:	e03e      	b.n	800233e <Get_Key_Time_Value+0xd2>
		else if (key[i].edge_flag == KEY_FREE) {
 80022c0:	4b26      	ldr	r3, [pc, #152]	; (800235c <Get_Key_Time_Value+0xf0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4a26      	ldr	r2, [pc, #152]	; (8002360 <Get_Key_Time_Value+0xf4>)
 80022c8:	460b      	mov	r3, r1
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a5b      	subs	r3, r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3301      	adds	r3, #1
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d131      	bne.n	800233e <Get_Key_Time_Value+0xd2>
			key[i].time_up++;				//定时器间隔（1ms）加1，用来判断按键松开时长到下个下降沿结束
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <Get_Key_Time_Value+0xf0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	491f      	ldr	r1, [pc, #124]	; (8002360 <Get_Key_Time_Value+0xf4>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	440b      	add	r3, r1
 80022ec:	330c      	adds	r3, #12
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b298      	uxth	r0, r3
 80022f4:	491a      	ldr	r1, [pc, #104]	; (8002360 <Get_Key_Time_Value+0xf4>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	330c      	adds	r3, #12
 8002302:	4602      	mov	r2, r0
 8002304:	801a      	strh	r2, [r3, #0]
			if (key[i].time_up > 65000)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <Get_Key_Time_Value+0xf4>)
 800230e:	460b      	mov	r3, r1
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a5b      	subs	r3, r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	330c      	adds	r3, #12
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002320:	4293      	cmp	r3, r2
 8002322:	d90c      	bls.n	800233e <Get_Key_Time_Value+0xd2>
				key[i].time_up = 65000;
 8002324:	4b0d      	ldr	r3, [pc, #52]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <Get_Key_Time_Value+0xf4>)
 800232c:	460b      	mov	r3, r1
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a5b      	subs	r3, r3, r1
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	330c      	adds	r3, #12
 8002338:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800233c:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <Get_Key_Time_Value+0xf0>)
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <Get_Key_Time_Value+0xf0>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b03      	cmp	r3, #3
 8002350:	d992      	bls.n	8002278 <Get_Key_Time_Value+0xc>
		}

	}
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000029 	.word	0x20000029
 8002360:	200000f0 	.word	0x200000f0

08002364 <Get_Key_Event>:

/************************
 函数功能：获取键按下的事件
 ***********************/
void Get_Key_Event() {
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	static uint8_t i;
	for (i = 0; i < KEY_NUMBER; i++) {
 8002368:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <Get_Key_Event+0x190>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e0b7      	b.n	80024e0 <Get_Key_Event+0x17c>
		if (key[i].event == 0) {
 8002370:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <Get_Key_Event+0x190>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	4a60      	ldr	r2, [pc, #384]	; (80024f8 <Get_Key_Event+0x194>)
 8002378:	460b      	mov	r3, r1
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a5b      	subs	r3, r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 80a5 	bne.w	80024d4 <Get_Key_Event+0x170>
			//短按
			if (key[i].time_down_pre > 0 && key[i].time_down_pre < SHORT_TIME) {
 800238a:	4b5a      	ldr	r3, [pc, #360]	; (80024f4 <Get_Key_Event+0x190>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <Get_Key_Event+0x194>)
 8002392:	460b      	mov	r3, r1
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a5b      	subs	r3, r3, r1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	3308      	adds	r3, #8
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <Get_Key_Event+0x72>
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <Get_Key_Event+0x190>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <Get_Key_Event+0x194>)
 80023ac:	460b      	mov	r3, r1
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a5b      	subs	r3, r3, r1
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	3308      	adds	r3, #8
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80023be:	d20a      	bcs.n	80023d6 <Get_Key_Event+0x72>
				key[i].event = 1;
 80023c0:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <Get_Key_Event+0x190>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <Get_Key_Event+0x194>)
 80023c8:	460b      	mov	r3, r1
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a5b      	subs	r3, r3, r1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			}

			//双击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <Get_Key_Event+0x190>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4a46      	ldr	r2, [pc, #280]	; (80024f8 <Get_Key_Event+0x194>)
 80023de:	460b      	mov	r3, r1
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a5b      	subs	r3, r3, r1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3306      	adds	r3, #6
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d017      	beq.n	8002420 <Get_Key_Event+0xbc>
 80023f0:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <Get_Key_Event+0x190>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	4a40      	ldr	r2, [pc, #256]	; (80024f8 <Get_Key_Event+0x194>)
 80023f8:	460b      	mov	r3, r1
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a5b      	subs	r3, r3, r1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	3306      	adds	r3, #6
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	2b77      	cmp	r3, #119	; 0x77
 8002408:	d80a      	bhi.n	8002420 <Get_Key_Event+0xbc>
				key[i].event = 4;
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <Get_Key_Event+0x190>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4619      	mov	r1, r3
 8002410:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <Get_Key_Event+0x194>)
 8002412:	460b      	mov	r3, r1
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a5b      	subs	r3, r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	2204      	movs	r2, #4
 800241e:	701a      	strb	r2, [r3, #0]
			}

			//三击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[0]<SHORT_SHORT_TIME && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <Get_Key_Event+0x190>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	4a34      	ldr	r2, [pc, #208]	; (80024f8 <Get_Key_Event+0x194>)
 8002428:	460b      	mov	r3, r1
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a5b      	subs	r3, r3, r1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	3306      	adds	r3, #6
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d024      	beq.n	8002484 <Get_Key_Event+0x120>
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <Get_Key_Event+0x190>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <Get_Key_Event+0x194>)
 8002442:	460b      	mov	r3, r1
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a5b      	subs	r3, r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b77      	cmp	r3, #119	; 0x77
 8002452:	d817      	bhi.n	8002484 <Get_Key_Event+0x120>
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <Get_Key_Event+0x190>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <Get_Key_Event+0x194>)
 800245c:	460b      	mov	r3, r1
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a5b      	subs	r3, r3, r1
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	3306      	adds	r3, #6
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	2b77      	cmp	r3, #119	; 0x77
 800246c:	d80a      	bhi.n	8002484 <Get_Key_Event+0x120>
				key[i].event = 5;
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <Get_Key_Event+0x190>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4a20      	ldr	r2, [pc, #128]	; (80024f8 <Get_Key_Event+0x194>)
 8002476:	460b      	mov	r3, r1
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	1a5b      	subs	r3, r3, r1
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	2205      	movs	r2, #5
 8002482:	701a      	strb	r2, [r3, #0]
			}

			//长按
			if (key[i].time_down_pre > LONG_TIME && key[i].time_down_pre < LONG_LONG_TIME) {
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <Get_Key_Event+0x190>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <Get_Key_Event+0x194>)
 800248c:	460b      	mov	r3, r1
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	1a5b      	subs	r3, r3, r1
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	3308      	adds	r3, #8
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800249e:	d919      	bls.n	80024d4 <Get_Key_Event+0x170>
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <Get_Key_Event+0x190>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <Get_Key_Event+0x194>)
 80024a8:	460b      	mov	r3, r1
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a5b      	subs	r3, r3, r1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	3308      	adds	r3, #8
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d80a      	bhi.n	80024d4 <Get_Key_Event+0x170>
				key[i].event = 2;
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <Get_Key_Event+0x190>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <Get_Key_Event+0x194>)
 80024c6:	460b      	mov	r3, r1
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	1a5b      	subs	r3, r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <Get_Key_Event+0x190>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <Get_Key_Event+0x190>)
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <Get_Key_Event+0x190>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	f67f af43 	bls.w	8002370 <Get_Key_Event+0xc>
			}
		}
	}
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000002a 	.word	0x2000002a
 80024f8:	200000f0 	.word	0x200000f0

080024fc <Key_EdgeJudge>:

void Key_EdgeJudge() {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	static uint8_t i;

	for (i = 0; i < KEY_NUMBER; i++) {
 8002500:	4b85      	ldr	r3, [pc, #532]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e100      	b.n	800270a <Key_EdgeJudge+0x20e>


		//持续按判断
		if (key[i].time_down > LONG_LONG_TIME) {
 8002508:	4b83      	ldr	r3, [pc, #524]	; (8002718 <Key_EdgeJudge+0x21c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	4a83      	ldr	r2, [pc, #524]	; (800271c <Key_EdgeJudge+0x220>)
 8002510:	460b      	mov	r3, r1
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a5b      	subs	r3, r3, r1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	330a      	adds	r3, #10
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002522:	4293      	cmp	r3, r2
 8002524:	d90a      	bls.n	800253c <Key_EdgeJudge+0x40>
			key[i].event = 3;
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4a7b      	ldr	r2, [pc, #492]	; (800271c <Key_EdgeJudge+0x220>)
 800252e:	460b      	mov	r3, r1
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	1a5b      	subs	r3, r3, r1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	2203      	movs	r2, #3
 800253a:	701a      	strb	r2, [r3, #0]
		}

		//抬起后120ms再判断事件避免把双击顶掉
		if (key[i].time_up == SHORT_SHORT_TIME) {
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <Key_EdgeJudge+0x21c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	4a76      	ldr	r2, [pc, #472]	; (800271c <Key_EdgeJudge+0x220>)
 8002544:	460b      	mov	r3, r1
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	1a5b      	subs	r3, r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	330c      	adds	r3, #12
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	2b78      	cmp	r3, #120	; 0x78
 8002554:	d10d      	bne.n	8002572 <Key_EdgeJudge+0x76>
			Get_Key_Event();
 8002556:	f7ff ff05 	bl	8002364 <Get_Key_Event>
			key[i].time_down_pre = 0;
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <Key_EdgeJudge+0x21c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	4619      	mov	r1, r3
 8002560:	4a6e      	ldr	r2, [pc, #440]	; (800271c <Key_EdgeJudge+0x220>)
 8002562:	460b      	mov	r3, r1
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3308      	adds	r3, #8
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
		}

		//边沿检测
		key[i].count <<= 1;					//放弃最老的值
 8002572:	4b69      	ldr	r3, [pc, #420]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	4a68      	ldr	r2, [pc, #416]	; (800271c <Key_EdgeJudge+0x220>)
 800257a:	460b      	mov	r3, r1
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a5b      	subs	r3, r3, r1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	3302      	adds	r3, #2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4a63      	ldr	r2, [pc, #396]	; (8002718 <Key_EdgeJudge+0x21c>)
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	4611      	mov	r1, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	b2d8      	uxtb	r0, r3
 8002592:	4a62      	ldr	r2, [pc, #392]	; (800271c <Key_EdgeJudge+0x220>)
 8002594:	460b      	mov	r3, r1
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a5b      	subs	r3, r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	3302      	adds	r3, #2
 80025a0:	4602      	mov	r2, r0
 80025a2:	701a      	strb	r2, [r3, #0]
		if (Get_Key_Value(i) == SET)		//写入新的值
 80025a4:	4b5c      	ldr	r3, [pc, #368]	; (8002718 <Key_EdgeJudge+0x21c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fe2b 	bl	8002204 <Get_Key_Value>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d115      	bne.n	80025e0 <Key_EdgeJudge+0xe4>
			key[i].count++;   				//最低位加1   0000 0000->0000,0001->0000 0011
 80025b4:	4b58      	ldr	r3, [pc, #352]	; (8002718 <Key_EdgeJudge+0x21c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4958      	ldr	r1, [pc, #352]	; (800271c <Key_EdgeJudge+0x220>)
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	3302      	adds	r3, #2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	b2d8      	uxtb	r0, r3
 80025ce:	4953      	ldr	r1, [pc, #332]	; (800271c <Key_EdgeJudge+0x220>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	440b      	add	r3, r1
 80025da:	3302      	adds	r3, #2
 80025dc:	4602      	mov	r2, r0
 80025de:	701a      	strb	r2, [r3, #0]

		//下降沿判断
		if (key[i].count == FALL_EDGE) {
 80025e0:	4b4d      	ldr	r3, [pc, #308]	; (8002718 <Key_EdgeJudge+0x21c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4a4d      	ldr	r2, [pc, #308]	; (800271c <Key_EdgeJudge+0x220>)
 80025e8:	460b      	mov	r3, r1
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a5b      	subs	r3, r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3302      	adds	r3, #2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2bf0      	cmp	r3, #240	; 0xf0
 80025f8:	d145      	bne.n	8002686 <Key_EdgeJudge+0x18a>
			key[i].edge_flag = KEY_PRESS;
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <Key_EdgeJudge+0x21c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	4a46      	ldr	r2, [pc, #280]	; (800271c <Key_EdgeJudge+0x220>)
 8002602:	460b      	mov	r3, r1
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a5b      	subs	r3, r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	3301      	adds	r3, #1
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]

			key[i].time_up_pre[0] = key[i].time_up_pre[1];
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <Key_EdgeJudge+0x21c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4619      	mov	r1, r3
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <Key_EdgeJudge+0x220>)
 8002620:	4603      	mov	r3, r0
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a1b      	subs	r3, r3, r0
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	3306      	adds	r3, #6
 800262c:	8818      	ldrh	r0, [r3, #0]
 800262e:	4a3b      	ldr	r2, [pc, #236]	; (800271c <Key_EdgeJudge+0x220>)
 8002630:	460b      	mov	r3, r1
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1a5b      	subs	r3, r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	3304      	adds	r3, #4
 800263c:	4602      	mov	r2, r0
 800263e:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[1] = key[i].time_up;
 8002640:	4b35      	ldr	r3, [pc, #212]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	4b34      	ldr	r3, [pc, #208]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	4a33      	ldr	r2, [pc, #204]	; (800271c <Key_EdgeJudge+0x220>)
 800264e:	4603      	mov	r3, r0
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	1a1b      	subs	r3, r3, r0
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	330c      	adds	r3, #12
 800265a:	8818      	ldrh	r0, [r3, #0]
 800265c:	4a2f      	ldr	r2, [pc, #188]	; (800271c <Key_EdgeJudge+0x220>)
 800265e:	460b      	mov	r3, r1
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	1a5b      	subs	r3, r3, r1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3306      	adds	r3, #6
 800266a:	4602      	mov	r2, r0
 800266c:	801a      	strh	r2, [r3, #0]
			key[i].time_up = 0;			//清空time_up
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <Key_EdgeJudge+0x220>)
 8002676:	460b      	mov	r3, r1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a5b      	subs	r3, r3, r1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	330c      	adds	r3, #12
 8002682:	2200      	movs	r2, #0
 8002684:	801a      	strh	r2, [r3, #0]
		}

		//上升沿判断
		if (key[i].count == RISE_EDGE) {
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <Key_EdgeJudge+0x220>)
 800268e:	460b      	mov	r3, r1
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	1a5b      	subs	r3, r3, r1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	3302      	adds	r3, #2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d12e      	bne.n	80026fe <Key_EdgeJudge+0x202>
			key[i].edge_flag = KEY_FREE;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <Key_EdgeJudge+0x21c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <Key_EdgeJudge+0x220>)
 80026a8:	460b      	mov	r3, r1
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	1a5b      	subs	r3, r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	3301      	adds	r3, #1
 80026b4:	2202      	movs	r2, #2
 80026b6:	701a      	strb	r2, [r3, #0]
			key[i].time_down_pre = key[i].time_down;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <Key_EdgeJudge+0x21c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <Key_EdgeJudge+0x21c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4a15      	ldr	r2, [pc, #84]	; (800271c <Key_EdgeJudge+0x220>)
 80026c6:	4603      	mov	r3, r0
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a1b      	subs	r3, r3, r0
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	330a      	adds	r3, #10
 80026d2:	8818      	ldrh	r0, [r3, #0]
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <Key_EdgeJudge+0x220>)
 80026d6:	460b      	mov	r3, r1
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	3308      	adds	r3, #8
 80026e2:	4602      	mov	r2, r0
 80026e4:	801a      	strh	r2, [r3, #0]
			key[i].time_down = 0;		//清空time_down
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <Key_EdgeJudge+0x21c>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4a0b      	ldr	r2, [pc, #44]	; (800271c <Key_EdgeJudge+0x220>)
 80026ee:	460b      	mov	r3, r1
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	1a5b      	subs	r3, r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	330a      	adds	r3, #10
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <Key_EdgeJudge+0x21c>)
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	4b03      	ldr	r3, [pc, #12]	; (8002718 <Key_EdgeJudge+0x21c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b03      	cmp	r3, #3
 8002710:	f67f aefa 	bls.w	8002508 <Key_EdgeJudge+0xc>
		}
	}
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000002b 	.word	0x2000002b
 800271c:	200000f0 	.word	0x200000f0

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2500      	movs	r5, #0
 8002724:	4e0c      	ldr	r6, [pc, #48]	; (8002758 <__libc_init_array+0x38>)
 8002726:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002728:	1ba4      	subs	r4, r4, r6
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a5      	cmp	r5, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	f000 f822 	bl	8002778 <_init>
 8002734:	2500      	movs	r5, #0
 8002736:	4e0a      	ldr	r6, [pc, #40]	; (8002760 <__libc_init_array+0x40>)
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <__libc_init_array+0x44>)
 800273a:	1ba4      	subs	r4, r4, r6
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a5      	cmp	r5, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002748:	4798      	blx	r3
 800274a:	3501      	adds	r5, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002752:	4798      	blx	r3
 8002754:	3501      	adds	r5, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027d0 	.word	0x080027d0
 800275c:	080027d0 	.word	0x080027d0
 8002760:	080027d0 	.word	0x080027d0
 8002764:	080027d4 	.word	0x080027d4

08002768 <memset>:
 8002768:	4603      	mov	r3, r0
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
